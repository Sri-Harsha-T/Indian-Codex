# दिया गया वर्ष लीप वर्ष है या नहीं यह जांचने के लिए एक पायथन फ़ंक्शन लिखें

def leapyear_check(year):
    if(year%4==0 and year%100!=0 or year%400==0):
        return True
    else:
        return False

# एक पूर्णांक के प्रमुख कारक को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

n=24
print("Factors are:")
i=1
while(i<=n):
    k=0
    if(n%i==0):
        j=1
        while(j<=i):
            if(i%j==0):
                k=k+1
            j=j+1
        if(k==2):
            print(i)
    i=i+1


# एक पूर्णांक के सभी विभाजकों को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

n=60
print("The divisors of the number are:")
for i in range(1,n+1):
    if(n%i==0):
        print(i)


# कोई संख्या एक आर्मस्ट्रांग संख्या है या नहीं यह जांचने के लिए एक पायथन प्रोग्राम लिखें

def amstrong_check(n):
    a=list(map(int,str(n)))
    b=list(map(lambda x:x**3,a))
    if(sum(b)==n):
        return True
    else:
        return False

# उपयोगकर्ता द्वारा दी गई पंक्तियों की संख्या के लिए पास्कल के त्रिकोण को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

n=10
a=[]
for i in range(n):
    a.append([])
    a[i].append(1)
    for j in range(1,i):
        a[i].append(a[i-1][j-1]+a[i-1][j])
    if(n!=0):
        a[i].append(1)
for i in range(n):
    print("   "*(n-i),end=" ",sep=" ")
    for j in range(0,i+1):
        print('{0:6}'.format(a[i][j]),end=" ",sep=" ")
    print()

# कोई संख्या एक पूर्ण संख्या है या नहीं यह जांचने के लिए एक पायथन प्रोग्राम लिखें

def perfect_no_check(n):
    sum1 = 0
    for i in range(1, n):
        if(n % i == 0):
            sum1 = sum1 + i
    if (sum1 == n):
        return True
    else:
        return False

# कोई संख्या प्रबल संख्या है या नहीं यह जाँचने के लिए एक Python प्रोग्राम लिखें

def strong_no_check(num):
    sum1=0
    temp=num
    while(num):
        i=1
        f=1
        r=num%10
        while(i<=r):
            f=f*i
            i=i+1
        sum1=sum1+f
        num=num//10
    if(sum1==temp):
        return True
    else:
        return False

# यदि दो संख्याएँ सौहार्दपूर्ण संख्याएँ हैं, तो जाँचने के लिए एक पायथन प्रोग्राम लिखें

def amicable_no_check(x, y):
    sum1=0
    sum2=0
    for i in range(1,x):
        if x%i==0:
            sum1+=i
    for j in range(1,y):
        if y%j==0:
            sum2+=j
    if(sum1==y and sum2==x):
        return True
    else:
        return False

# कोई संख्या एक अभाज्य संख्या है या नहीं यह जांचने के लिए एक पायथन प्रोग्राम लिखें

def prime_no_check(a):
    k=0
    for i in range(2,a//2+1):
        if(a%i==0):
            k=k+1
    if(k<=0):
        return True
    else:
        return False

# प्रथम एन प्राकृतिक संख्याओं के योग को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

n=7
sum1 = 0
while(n > 0):
    sum1=sum1+n
    n=n-1
print("The sum of first n natural numbers is",sum1)

# रेंज में सभी पायथागॉरियन ट्रिपल को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

limit=10
c=0
m=2
while(c<limit):
    for n in range(1,m+1):
        a=m*m-n*n
        b=2*m*n
        c=m*m+n*n
        if(c>limit):
            break
        if(a==0 or b==0 or c==0):
            break
        print(a,b,c)
    m=m+1

# एक सूची में एक विशेष संख्या कितनी बार आती है, इसकी संख्या को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

a=[2, 3, 8, 9, 2, 4, 6]
k=0
num=int(input("Enter the number to be counted:"))
for j in a:
    if(j==num):
        k=k+1
print("Number of times",num,"appears is",k)

# दी गई संख्या के लिए Collatz Conjecture का परीक्षण और प्रिंट करने के लिए Python प्रोग्राम लिखें

def collatz(n):
    while n > 1:
        print(n, end=' ')
        if (n % 2):
            # n is odd
            n = 3*n + 1
        else:
            # n is even
            n = n//2
    print(1, end='')

# एक संख्या में सेट बिट्स की गणना करने के लिए एक पायथन फ़ंक्शन लिखें

def count_set_bits(n):
    count = 0
    while n:
        n &= n - 1
        count += 1
    return count

# पुनरावर्तन का उपयोग करके ग्रे कोड उत्पन्न करने के लिए एक पायथन प्रोग्राम लिखें

def get_gray_codes(n):
    """Return n-bit Gray code in a list."""
    if n == 0:
        return ['']
    first_half = get_gray_codes(n - 1)
    second_half = first_half.copy()
 
    first_half = ['0' + code for code in first_half]
    second_half = ['1' + code for code in reversed(second_half)]
 
    return first_half + second_half

# ग्रे कोड को बाइनरी में बदलने के लिए एक पायथन प्रोग्राम लिखें

def gray_to_binary(n):
    """Convert Gray codeword to binary and return it."""
    n = int(n, 2)
 
    mask = n
    while mask != 0:
        mask >>= 1
        n ^= mask

    return bin(n)[2:]

# बाइनरी को ग्रे कोड में बदलने के लिए एक पायथन प्रोग्राम लिखें

def binary_to_gray(n):
    """Convert Binary to Gray codeword and return it."""
    n = int(n, 2)
    n ^= (n >> 1)

    return bin(n)[2:]

# दी गई संख्या को उलटने के लिए एक पायथन प्रोग्राम लिखें

n=1023
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
print("Reverse of the number:",rev)

# तीन अंकों को स्वीकार करने के लिए एक पायथन प्रोग्राम लिखें और अंकों से सभी संभावित संयोजनों को प्रिंट करें

a=2
b=9
c=5
d=[]
d.append(a)
d.append(b)
d.append(c)
for i in range(0,3):
    for j in range(0,3):
        for k in range(0,3):
            if(i!=j&j!=k&k!=i):
                print(d[i],d[j],d[k])

# आइडेंटिटी मैट्रिक्स को प्रिंट करने के लिए एक पायथन फंक्शन लिखें

def print_identity_matrix(n):
    for i in range(0,n):
        for j in range(0,n):
            if(i==j):
                print("1",sep=" ",end=" ")
            else:
                print("0",sep=" ",end=" ")
        print()

# सूची के रूप में दिए गए मेनू और लागत का उपयोग करके एक पायथन प्रोग्राम प्रिंट रेस्तरां मेनू लिखें

class Food(object):
    def __init__(self, name, price):
        self.name = name
        self.price = price
    
    def getprice(self):
        return self.price
    
    def __str__(self):
        return self.name + ' : ' + str(self.getprice())
    
def buildmenu(names, costs):
    menu = []
    for i in range(len(names)):
        menu.append(Food(names[i], costs[i]))
    return menu

names = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']

costs = [250, 150, 180, 70, 65, 55, 120, 350]

Foods = buildmenu(names, costs)

n = 1
for el in Foods:
    print(n,'. ', el)
    n = n + 1

# क्लोजर का उपयोग करके दी गई संख्या के लिए फाइबोनैचि श्रृंखला की सूची मुद्रित करने के लिए एक पायथन प्रोग्राम लिखें

def fib():
    cache = {1:1, 2:1}

    def calc_fib(n):
        if n not in cache:
            print(f'Calculating fib({n})')
            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)
        return cache[n]
    return calc_fib

# किसी दिए गए नो यूजिंग क्लास के लिए फाइबोनैचि श्रृंखला की सूची प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

class Fib:
    def __init__(self):
        self.cache = {1:1, 2:1}

    def fib(self, n):
        if n not in self.cache:
            print(f'Calculating fib({n})')
            self.cache[n] = self.fib(n-1) + self.fib(n-2)
        return self.cache[n]

# क्लोजर का उपयोग करके दी गई संख्या के फैक्टोरियल की गणना करने के लिए एक पायथन फ़ंक्शन लिखें

def fact():
    cache = {0:1, 1:1}

    def calc_fib(n):
        if n not in cache:
            print(f'Calculating fact({n})')
            cache[n] = calc_fib(n - 1) * n
        return cache[n]
    return calc_fib

# वर्ग का उपयोग करके दिए गए नहीं के भाज्य की गणना करने के लिए एक पायथन फ़ंक्शन लिखें

class Fact:
    def __init__(self):
        self.cache = {0:1, 1:1}

    def fact(self, n):
        if n not in self.cache:
            self.cache[n] = self.fact(n-1) * n
        return self.cache[n]

# दो दिए गए अनुक्रमों के डॉट उत्पाद की गणना करने के लिए एक पायथन फ़ंक्शन लिखें


def dot_product(a, b):
    return sum( e[0]*e[1] for e in zip(a, b))

# साइन श्रृंखला का योग ज्ञात करने के लिए एक पायथन फ़ंक्शन लिखें

import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine

# कोसाइन श्रृंखला का योग ज्ञात करने के लिए एक पायथन फ़ंक्शन लिखें

def cosine(x,n):
    cosx = 1
    sign = -1
    for i in range(2, n, 2):
        pi=22/7
        y=x*(pi/180)
        cosx = cosx + (sign*(y**i))/math.factorial(i)
        sign = -sign
    return cosx

# एक स्ट्रिंग से स्वरों को निकालने के लिए एक पायथन फ़ंक्शन लिखें

def vowel_stripping(string):
    '''This function takes a string as an input strips out vowels and returns stripted out string'''
    return "".join([x for x in string if x not in('a','e','i','o','u')])

# एक पायथन फ़ंक्शन लिखें जो स्ट्रिंग्स के चरित्र को बदल देता है

def char_shift(string, shift_count):
    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''
    return "".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])

# एक पायथन फ़ंक्शन लिखें जो एक स्ट्रिंग में सबसे बड़ा वर्ण लौटाता है

from functools import reduce
def biggest_char(string):
    '''This function takes an input as a string and returns the biggest output character in the string'''
    biggest_chr = lambda x, y: x if ord(x) > ord(y) else y
    return reduce(biggest_chr, string)

# एक समभुज बहुभुज के आंतरिक कोण की गणना करने वाला एक पायथन फ़ंक्शन लिखें

def interior_angle(no_of_sides):
    return (no_of_sides - 2) * 180 / no_of_sides

# एक समबाहु बहुभुज की पार्श्व लंबाई की गणना करने वाला एक पायथन फ़ंक्शन लिखें

import math
def side_length(no_of_sides, circumradius):
    return 2 * circumradius * math.sin(math.pi / no_of_sides)

# एक समभुज बहुभुज के क्षेत्रफल की गणना करने वाला एक पायथन फ़ंक्शन लिखें


import math
def area(no_of_sides, circumradius):
    side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)
    apothem = circumradius * math.cos(math.pi / no_of_sides)
    return no_of_sides / 2 * side_length * apothem



# दिए गए इंटरजर को बाइनरी में प्रिंट करने के लिए एक फंक्शन लिखें
def int_to_binary(num: int):
    """
    function to print number to binary
    """
    if isinstance(num, int):
        print(f'The binary of {num} is {bin(num).replace("0b","")}')
    else:
        raise ValueError('Invalid Input')


# दी गई स्ट्रिंग पैलिंड्रोम है या नहीं यह जांचने के लिए एक फ़ंक्शन लिखें (केस असंवेदनशील)
def palindrome_str_check(value: str):
    """
    function to print whether string is palindrome or not
    """
    if isinstance(value, str) :
        print( value.lower() == value[::-1].lower() )
    else:
        raise ValueError('Invalid Input')


# DD/MM/YYYY प्रारूप में दी गई तारीख मान्य है या नहीं, यह जांचने के लिए एक फ़ंक्शन लिखें
def date_validation(inputdate: str):
    """
    function take input date in DD/MM/YYYY format and check its validation.
    """
    import datetime
    dd, mm, year = inputdate.split('/')
    isValidDate = True
    try :
        datetime.datetime(int(year),int(mm), int(dd))
    except ValueError : 
        isValidDate = False
    if(isValidDate):
        print ("Input Date is Valid")
    else:
        print ("Input Date is invalid")


# विभाजक की गिनती मुद्रित करने के लिए एक फ़ंक्शन लिखें
def divisor_count(num: int):
    """
    function to count the number of divisor of interger.
    """
    if isinstance(num, int):
        count = 0
        for i in range(1, num+1):
            if num%i == 0:
                count = count+1
        print(f'Number of divisor is {count}')
    else:
        raise ValueError('Invalid Input')


# सूची समझ का उपयोग करके विभाजक की गिनती मुद्रित करने के लिए एक फ़ंक्शन लिखें
def divisor_using_list(num: int):
    """
    function to count the number of divisor using list comprehension.
    """
    if isinstance(num, int):
        count = [i for i in range(1,num+1) if not num%i]
        print(f'Number of divisor is {count}')
    else:
        raise ValueError('Invalid Input')


# दो डिक्शनरी के मर्जर को प्रिंट करने के लिए एक फंक्शन लिखें
def merge_dict(dict1: dict, dict2: dict):
    """
    function to print merger of two dictionary
    """
    final_dict = {**dict1, **dict2}
    print(final_dict)


# किसी सूची में दूसरी सबसे बड़ी संख्या को प्रिंट करने के लिए एक फंक्शन लिखें
def second_large_num(num: list):
    if isinstance(num, list):
        num.sort()
        print (num[-2])
    else:
        raise ValueError('Invalid Input')


# सूची से खाली सूची को हटाने और प्रिंट करने के लिए एक फ़ंक्शन लिखें
def remove_empty_list(num1: list):
    if isinstance(num1, list):
        modified = list(filter(None, num1))
        print(modified)


# एक सूची और प्रिंट से खाली टुपल्स को हटाने के लिए एक फ़ंक्शन लिखें
def remove_empty_tuple(num1: list):
    if isinstance(num1, list):
        modified = list(filter(None, num1))
        print(modified)


# सूची से डुप्लिकेट निकालने के लिए एक पायथन फ़ंक्शन लिखें
def remove_duplicates(dup_list: list):
    print(list(set(dup_list)))


# एक स्ट्रिंग में प्रत्येक शब्द को उलटने के लिए एक फ़ंक्शन लिखें
def reverse_word(sen: str):
    words = sen.split(' ')
    rever_word = [ i[::-1] for i in words ]
    final_sen = ' '.join(rever_word)
    print(final_sen)


# लीप वर्ष की जाँच करने के लिए कार्य
def check_leap_year(year: int):
    if not year%4:
        print('Leap Year')
    else:
        print('Not a leap year')


# गुणन सारणी को प्रिंट करने का कार्य
def maths_tables( no_ : int):
     for i in range(1, 11):
         print(f'{no_}x{i}={no_*i}')


# आर्मस्ट्रांग संख्या की जांच करने के लिए कार्य करें या नहीं
def check_armstrong(no_: int):
    sum_ = 0
    temp = no_
    while temp > 0:
        digit = temp % 10
        sum_ += digit ** 3 
        temp //= 10

    if no_ == sum_:  
       print(f"{no_} is an Armstrong number")  
    else:  
       print(f"{no_} is not an Armstrong number")


# एक सीमा में सभी आर्मस्ट्रांग को प्रिंट करने का कार्य
def print_all_armstrong(lower: int, upper: int):
    for num in range(lower,upper + 1):  
        sum_ = 0
        temp = num
        while temp > 0:
            digit = temp % 10
            sum_ += digit ** 3
            temp //= 10
            if num == sum_:
                print(num)

# दो नंबर के LCM को प्रिंट करने का कार्य
def ret_lcm(x: int, y: int):
    if x > y:
        greater = x
    else:
        greater = y
    while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1
    return lcm


# दो नंबरों के HCF को प्रिंट करने का कार्य
def ret_hcf(x: int, y: int):
    if x > y:
        greater = x
    else:
        greater = y
    while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater  
            break
        greater += 1
    return int(x*y/lcm)


# एक चरित्र के एएससीआई मूल्य को प्रिंट करने के लिए कार्य करता है
def show_ascii(a: str):
    print(ord(a))


# कैलेंडर प्रिंट करने का कार्य
def show_mm_calendar(mm: int, yyyy: int):
    import calendar
    print(calendar.month(yyyy, mm)


# एक ऐसा फ़ंक्शन बनाएं जो 1 और 10 के बीच संख्याओं की सूची लेता है (एक संख्या को छोड़कर) और लापता संख्या लौटाता है।
def print_miss_num(l: list):
     print(f'Missing number is {55-sum(l)}')


# स्ट्रिंग से समतुल्य मार्श कोड प्रिंट करने का कार्य

def encode_marsh(sen : str):
    char_to_dots = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
                      'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
                      'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
                      'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
                      'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',
                      '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
                      '6': '-....', '7': '--...', '8': '---..', '9': '----.',
                      '&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',
                      ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',
                      '-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.'
                    }
    for i in sen:
        print(char_to_dots[i.upper()])


# एक वाक्य को नजरबंद करने का कार्य
def check_intern(a , b):
    if a is b:
        print(f'{a} and {b} is interned by Python')
    else:
        print(f'{a} and {b} is not interned by Python')


# स्ट्रिंग को इंटर्न स्ट्रिंग में बदलें
def str_to_intern_str(a):
    import sys
    b = sys.intern(a)
    if a is b:
        print('Sentence is interned')
    else:
        raise ValueError('This should not happen')


# एक कैल्क फ़ंक्शन द्वारा 10 मिलियन बार एक साधारण गुणा करने के लिए लगने वाले समय को प्रिंट करने के लिए एक फ़ंक्शन लिखें
def time_calc(n: int):
    import time
    start = time.perf_counter()
    for i in range(10000000):
        n*2
    end = time.perf_counter()
    return end-start


# दिए गए आधार के साथ अन्य मान को इंट में प्रिंट करने के लिए एक फ़ंक्शन लिखें
def other_int(value, b):
    return int(value, b)


# किसी संख्या को उसके तुल्य भिन्न में बदलने के लिए एक फंक्शन लिखिए
def no_to_fraction(no_):
    from fractions import Fractions
    return Fractions(no_)


# दो नंबर (फ़्लोटिंग भी) की जाँच करने के लिए फ़ंक्शन पास हैं या नहीं
def check_isclose(x, y)
    from math import isclose
    return isclose(x, y)


# उपयोगकर्ता के उल्लेख के अनुसार तापमान को परिवर्तित करने का कार्य
def temp_converter(temp , temp_given_in= 'F'):
    if temp < 0:
        raise ValueError("Input Temperature is Negative")
    else:
        if temp_given_in.upper() == 'F':
            t = (temp-32)*5/9
            return t
        elif temp_given_in.upper() == 'C':
            t = 9/5 * (temp) + 32
            return t
        elif temp_given_in.upper() not in ('C' , 'F'):
            raise NotImplementedError("Invalid Temperature Coneversion")


# नियमित बहुभुज क्षेत्र को प्रिंट करने का कार्य

def polygon_area(side_length=1, side=3):
    from math import tan
    if side_length <= 0:
        raise ValueError("How come Side is zero.")
    else:
        if side <= 0 or side >=7:
            raise NotImplementedError 
        elif side in ( 2 , 1 ):
            raise ValueError("No Polygon of Side 1 & 2 Exists")
        elif side == 3:
            return side_length*side_length*side/4*tan(180/side)
        elif side == 4:
            return side_length*side_length
        elif side == 5:
            return side_length*side_length*side/4*tan(180/side)
        elif side == 6:
            return side_length*side_length*side/4*tan(180/side)


# उपयोगकर्ता के उल्लेखित डेटा के अनुसार गति परिवर्तक को वापस करने का कार्य

def speed_converter(speed , dist = 'KM', time = 'HR'):
    if speed < 0 or type(dist) == str or type(time) == str:
        raise ValueError("Invalid Input Format")
    else:
        if dist.upper == 'KM':
            if time.upper()  == 'S':
                return True
            elif time.upper == 'MS':
                return True
            elif time.upper() == 'M':
                return True
            elif time.upper() == 'HR':
                return True
            elif time.upper() == 'DAY':
                return True
            else:
                raise ValueError("Valid Distance Invalid Time")
        elif dist.upper == 'M':
            if time.upper()  == 'S':
                return True
            elif time.upper == 'MS':
                return True
            elif time.upper() == 'M':
                return True
            elif time.upper() == 'HR':
                return True
            elif time.upper() == 'DAY':
                return True
            else:
                raise ValueError("Valid Distance Invalid Time")
        elif dist.upper == 'FT':
            if time.upper()  == 'S':
                return True
            elif time.upper == 'MS':
                return True
            elif time.upper() == 'M':
                return True
            elif time.upper() == 'HR':
                return True
            elif time.upper() == 'DAY':
                return True
            else:
                raise ValueError("Valid Distance Invalid Time")
        elif dist.upper == 'YRD':
            if time.upper()  == 'S':
                return True
            elif time.upper == 'MS':
                return True
            elif time.upper() == 'M':
                return True
            elif time.upper() == 'HR':
                return True
            elif time.upper() == 'DAY':
                return True
            else:
                raise ValueError("Valid Distance Invalid Time")
        else:
            raise ValueError("Invalid User Distance Input")


# शब्दकोश से मान निकालने का कार्य
def remove_dic_value(a: dict, key)
    a.pop(key)
    return a


# शब्दकोश की शुरुआत में समारोह सम्मिलित करें
def dict_in_at_begin(orgin: dict, new_: dict):
    final = {**new_, **origin}
    return final


# टुपल्स की सूची को शब्दकोश में बदलने का कार्य
# Input  : [ ('a',1), ('b', 2), ('c', 3)]
# Output : { 'a':1, 'b':2, 'c':3 }
def list_to_dict(l: list):
    final_dict = {}
    for i in l:
        final_dict[i[0]] = i[1]
    return final_dict


# कुंजी के संबंध में शब्दकोश को सॉर्ट करने का कार्य
def dict_sort_with_key(test_dict: dict):
    final dict = {}
    temp = sorted(test_dict)
    for i in temp:
        final_dict[i] = test_dict[a]
    return final_dict


# एक पत्र के मिरिर वर्ण वापस करने के लिए कार्य

def mirror_character(word: str, value: int):
    import string
    letters = string.ascii_lowercase
    rev_letter = letters[::-1]
    dict_char = dict(zip(letters, rev_letter))
    final_1 = word[0:value]
    final_2 = []
    for i in range(value, len(word)):
        final_2.append(dict_char[word[i]])
    print(final_1+''.join(final_2))


# दो टपल जोड़ने का कार्य

def add_tuple(tup1, tup2):
    return tup1+tup2


# प्रत्येक टपल में संख्या और उसके घन वाली दी गई सूची से टुपल्स की सूची बनाने के लिए कार्य करें

def list_of_tuple( l: list):
    final = [ (i, pow(i,3)) for i in l]
    return final


# अक्षर के दर्पण का शब्दकोश बनाने का कार्य
def letter_mirror():
    import string
    letter = string.ascii_lowercase
    rvr_letter = letter[::-1]
    dict_char = dict(zip(letter, rvr_letter))
    return dict_char


# पत्र के एएससीआई मूल्य को प्रिंट करने का कार्य
def show_ascii():
    import string
    letter = string.ascii_letters
    for i in letter:
        print(i+":"+str(ord(i)))


# GMT पर वर्तमान समय प्राप्त करने के लिए कार्य करें
def current_time():
    import datetime
    print(datetime.datetime.now())


# भारत समय मुद्रित करने के लिए समारोह
def get_India_time():
    import datetime, pytz
    print(datetime.datetime.now( pytz.timezone('Asia/kolkata') ))


# समारोह कल और कल की तारीख मुद्रित करने के लिए
def tmrw_yest_time()
    import datetime
    yesterday = datetime.datetime.now() - datetime.timedelta(1)
    tmrw = datetime.datetime.now() + datetime.timedelta(1)
    print( yesterday, tmrw )


# सार्वभौमिक कार्य
def universal_func(*args, **kwargs):
    print(args)
    print(**kwargs)


# लॉगिंग संदेश
def logging(msg, *, dt = datetime.utcnow()):
    print(f'message at {dt} was {msg}')


# पुनरावर्तन का उपयोग करके संख्या का भाज्य
def factorial(n: int):
    if n<1:
        return 1
    else:
        return n * factorial(n-1)


# प्रथम श्रेणी समारोह
def call_func(x, func):
    return fn(x)


# दस्तावेज दिखाने के लिए समारोह
def doc_func(*args, **kwargs):
    """
    function to show how to do do documentation of function
    First line after function wriiten inside triple quotes.
    Don't forget to close when job is done.
    """
    pass


# एनोटेशन दिखाने के लिए कार्य करें
def anno_func(a: "Mandatory",
              b: "Optional"=2,
              c: "Optional"=10,
              *args: "Extra Position variable",
              **kwargs: "Provide extra to unpack dictionary") -> 'Documentation to show how to do do annotation':
    """
    function to show how to do do documentation of function
    First line after function wriiten inside triple quotes.
    Don't forget to close when job is done.
    """
    pass


# फ़ंक्शन यह जांचने के लिए कि दिया गया नाम फ़ंक्शन या विधि है या नहीं
def inspect_func(fn):
    from inspect import isfunction, ismethod
    print(f'{fn} is method {ismethod(func)}')
    print(f'{fn} is function {isfunction(func)}')


# फ़ंक्शन के स्रोत कोड को प्रिंट करने के लिए फ़ंक्शन

def print_so(f: "Function name/class name/module"):
    from inspect import getsource
    print(getsource(f))


# ज़िप दो टपल
def zip_to_tuple( tup1, tup2):
    return zip(tup1, tup2)


# pythonish का उपयोग करके फैक्टोरियल
def fact_one_line(n):
    return 1 if n < 2 else n*fact_one_line(n-1)


# सभी कार्यान्वयन के लिए कार्य करें
def all_imp(a):
   return all(a)


# किसी भी कार्यान्वयन के लिए कार्य करें
def any_imp(a):
   return any(a)


# बूलियन को सही/गलत दिखाने का कार्य एक संख्या है
def bool_show(a=5):
    return True*a



# वैश्विक चर कार्यान्वयन का उपयोग करने के लिए कार्य
def gloabl_use(n):
    global val
    return val * n


# स्थानीय अवधारणा का कार्यान्वयन
def inner_show():
    x = 'Hola'
    def inner():
        nonlocal x
        x = 'Hola World'
        print(f'Inner function x is {x}')
    inner()
    print(f'outer function x is {x}')


# कस्टम काउंटर समारोह
def custom_counter():
    """
    An implementation of closures
    """
    x = 0
    def inner():
       nonlocal x
       x += 1
       print(f' Switch or button is called {x} times')
     return inner


# काउंटर के साथ कस्टम लॉगिंग
def custom_counter_log():
    """
    An implementation of closures
    """
    x = 0
    dt = datetime.now()
    def inner():
       nonlocal x
       x += 1
       print(f' Switch or button is called {x} at {dt}')
     return inner

# एक समय व्यतीत बंद करने के लिए कार्य करें
def time_elsaped()
    start = perf_counter()
    def inner()
        nonlocal perf_counter
        return perf_counter() - start
    return inner


# कार्य करने के लिए काउंटर संलग्न करने के लिए कार्य
def attach_counter(fn: "Function"):
    count = 0
    def inner(*args, **kwargs):
        nonlocal count
        count += 1
        return fn(*args, **kwargs)
    return inner



# लॉग विवरण के साथ फ़ंक्शन क्लोजर को दूसरे फ़ंक्शन में संलग्न करें
def attach_log(fn: "function"):
    def inner(*args, **kwargs):
        dt = datetime.now()
        print(f'{fn.__name__} is called at {dt} with {args} {kwargs} ')
        return fn(*args, **kwargs)
    return inner


# फंक्शन काउंटर एक डिक्शनरी में कॉल किए गए मल्टीपल फंक्शन की संख्या को स्टोर करने के लिए
def count_func_dict(fn: "Function Name"):
    count = 0
    def inner(*args, **kwargs):
        nonlocal count
        count =+= 1
        counter_67[fn.__name__] = count
        return fn(*args, **kwargs)
    return inner


# असीमित लंबाई int पहले दो और बाकी के लिए न्यूनतम 2 मान के टपल को अनपैक करने के लिए एक फ़ंक्शन लिखें
def unpack_tuple(tup):
    a, b , *c = tup
    return a , b, c



# एक फ़ंक्शन लिखें जो असीमित संख्या लेता है और इसे जोड़ता है
def add_unlimited(*args):
    return sum(args)


# जब भी क्लास के ऑब्जेक्ट को कॉल किया जाता है तो यूजर डिफाइंड मैसेज को प्रिंट करने के लिए क्लास को कॉल किया जाता है
class User:
    def __init__(self, msg="Demo of custom message by repr and str in class"):
        self.msg = msg

    def __repr__(self):
        return f"Object of User class is called with parameter {self.msg}"

    def __str__(self):
        return f"Object of User class is called with parameter {self.msg}"



# वर्ग समानता के कार्यान्वयन और एक वर्ग में कार्यान्वयन से कम दिखाने के लिए

class GqLt:
    def __init__(self, msg="Demo of lt and eq in class"):
        self.msg = msg

    def __eq__(self, other):
        """
        Equality check between two object of same class.
        It is mandatory to implement __eq__ in class to do equality check.
        """
        if isinstance(other, GqLt):
            return "Code to be written here to match equality check between two object of same class"
        else:
            raise ValueError('Invalid comparison')

    def __lt__(self, other):
        """
        Less than or greater than check between two objects of same class.
        It is mandatory to implement __eq__ in class to do equality check.
        """
        if isinstance(other, GqLt):
            return "Code to be written here to match equality check between two object of same class"
        else:
            raise ValueError('Invalid comparison')


# क्लास को यह दिखाने के लिए कि क्लास को कॉल करने योग्य कैसे बनाया जाए
class CallShow:
    """
    This is the space to do documentation related to class.
    """
    def __init__(self, msg = 'Demo class to show how to make class object as callable'):
        self.msg = msg

    def __call__(self):
        """
        to make object as callable the class should have __call__ in it
        """
        return f"Code to be writen here above to act as per accling object of call"


# Namedtuple में IPL मैच के डेटा को स्टोर करने का कार्य
def store_ipl_date(tuple1):
    from collections import namedtuple
    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')
    return IplData(*tuple1)


# नामांकित दिखाने के लिए कार्य टपल का उदाहरण है
def show_ins_tup():
    from collections import namedtuple
    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')
    match1 = IplData('RCBvsKKR', 'KKR', 'bat', '229/9', '85/8', 'KKR')
    return isinstance(match1, tuple)


# दो वैक्टरों का रिटर्न डॉट उत्पाद
def dot_product(a: "Vector1", b: "Vector2"):
    return sum( e[0]*e[1] for e in zip(a,b) )


# namedtuple के दस्तावेज दिखाने के लिए कार्य
def show_doc_named():
    from collections import namedtuple
    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')
    IplData.__doc__ = 'Namedtuple class to store the IPL match data'
    IplData.match.__doc__ = 'Team name'
    IplData.toss.__doc__ = 'Who won the toss'
    IplData.choice.__doc__ = 'Decision taken by wiinng team toss'
    IplData.session1.__doc__ = 'Run scored by Team1'
    IplData.session2.__doc__ = 'Run scored by Team2'
    IplData.winner.__doc__ = 'Winning Team'
    return help(IplData)


# एक फ़ंक्शन चलने पर सभी स्थानीय मान दिखाएं
def show_local():
    import math
    a = 10
    b = 'Hello There'
    print(locals())


# कक्षा स्थिर विधि के कार्यान्वयन को दिखाने के लिए
class Mathematics:
    """
    This is the space to do documentation related to class.
    """
    def __init__(self, msg="Demo class of Mathematics"):
        self.msg = msg

    def __str__(self):
        return f' String representation of an object'

    def __repr__(self):
        return f' repr representation of an object with parameter {self.msg}'

    @staticmethod
    def addition(a: "Variable1", b: 'Variable2'):
        """
        @staticmethod makes the mtethod of class as static method.
        It is always recommended to metion it via decorator.
        """
        return a+b


# वर्ग सूची के कस्टम अनुक्रम के कार्यान्वयन को दिखाने के लिए
class CustomList:
    """
    This is the space to do documentation related to class.
    """
    def __init__(self):
        self.list_ = [1,2,3,4]

    def __len__(self):
        return len(self.list_)

    def __getitem__(self, i):
        if isinstance(i, int):
            if i<0:
                i = len(self.list_) + i
            
            if i<0 or i>=len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]


# वर्ग टपल के कस्टम अनुक्रम के कार्यान्वयन को दिखाने के लिए
class CustomTuple:
    """
    This is the space to do documentation related to class.
    """
    def __init__(self):
        self.list_ = (1,2,3,4)

    def __len__(self):
        return len(self.list_)

    def __getitem__(self, i):
        if isinstance(i, int):
            if i<0:
                i = len(self.list_) + i
            
            if i<0 or i>=len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]


# उपयोगकर्ता की पसंद के बीच पूर्णांक यादृच्छिक संख्या उत्पन्न करें
def gen_ran_int_number(lower, upper):
    import random
    final = [ random.randint(lower, upper) for _ in range(10) ]
    return final


# f स्ट्रिंग का उपयोग करने का तरीका दिखाने के लिए फ़ंक्शन
def f_string(msg: "user message"):
    print(f'This is an f string with user paramter {msg}')


# टपल की तुलना में सूची से पढ़ने के मूल्यों को दिखाने का कार्य महंगा है
def compare_list_tuple():
    from timeit import timeit
    import random
    l = [ random.randint(1,100) for _ in range(100) ]
    tu = tuple(l)
    list_time = timeit(stmt = 'max(l)', globals = locals(), number = 1)
    tup_time = timeit(stmt = 'max(tu)', globals = locals(), number = 1)
    if list_time > tup_time:
        print('Hence proved')
    else:
        raise ValueError('You did something Wrong')


# पुनरावृत्तियों की अवधारणा का उपयोग करके यादृच्छिक संख्या उत्पन्न करें

class RandomInt:
    """
    This is the space to do documentation related to class.
    """
    def __init__(self):
       self.n = 10

    def __next__(self):
        if self.n > 0:
           print(random.randint(0,10))
           self.n -= 1
        else:
           raise StopIteration

    def __iter__(self):
        return self


# 10 यादृच्छिक पूर्णांक संख्या को प्रिंट करने के लिए उदाहरण का उपयोग करके iter, iterables और iterator में अंतर करें
class RandomInt:
    """
    This is the space to do documentation related to class.
    """
    def __init__(self):
       pass

    def __iter__(self):
        return self.RandomIntIterator(self)

    class RandomIntIterator:
        def __init__(self):
            self.count = 10

        def __iter__(self):
            return self

        def __next__(self):
            if self.count > 0:
                print(random.randint(0,10))
                self.count -= 1
            else:
                raise StopIteration


# टपल के उदाहरण का उपयोग करके कस्टम अनुक्रम प्रकार, iter, iterables और iterator की कक्षा दिखाएं
class CustomTupleIter:
    """
    This is the space to do documentation related to class.
    """
    def __init__(self):
        self.list_ = (1,2,3,4)

    def __len__(self):
        return len(self.list_)

    def __getitem__(self, i):
        if isinstance(i, int):
            if i<0:
                i = len(self.list_) + i

            if i<0 or i>=len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]

    def __iter__(self):
        return self.CustomTupleIterator(self)

    class CustomTupleIterator:
        def __init__(self, other):
            self.count = 0
            self.other = other

        def __iter__(self):
            return self

        def __next__(self):
            if self.count < len(self.other.list_):
                self.count += 1
                return self.other.list_[self.count]
            else:
                raise StopIteration


# दो कार्यात्मकता के साथ मूल सूची का क्लोन i. पुनरावृत्ति और अनुक्रम
class CustomListIter:
    """
    This is the space to do documentation related to class.
    """
    def __init__(self):
        self.list_ = [1,2,3,4]

    def __len__(self):
        return len(self.list_)

    def __getitem__(self, i):
        if isinstance(i, int):
            if i<0:
                i = len(self.list_) + i

            if i<0 or i>=len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]

    def __iter__(self):
        return self.CustomListIterator(self)

    class CustomListIterator:
        def __init__(self, other):
            self.count = 0
            self.other = other

        def __iter__(self):
            return self

        def __next__(self):
            if self.count < len(self.other.list_):
                self.count += 1
                return self.other.list_[self.count]
            else:
                raise StopIteration


# एक वर्ग लिखें जो वर्गों की तरह कार्य करता है और मूल्यों और कस्टम अनुक्रम प्रकार के वर्गों को मुद्रित करना चाहिए।
class Square:
    def __init__(self, n):
        self.n = n

    def __iter__(self):
        return self.show_sq(self.n)

    @staticmethod
    def show_sq(n):
         for i in range(n):
             yield i**2

    def __getitem__(self, i):
       if isinstance(i, int):
            if i < = self.n:
                print(i**2)
            else:
                raise ValueError('Index out of bound')


# फाइबोनैसी जनरेटर का उपयोग कर
def fibo(n):
    x = 0
    yield x
    y = 1
    yield y
    for i in range(n-1):
        x, y = y, x+y
        yield y



# शो जनरेटर सूची से तेज है
def show_gen_fast():
    from timeit import timeit
    dt = timeit("[num for num in fib(100) ]", globals = globals(), number=1)
    return dt

# दो strings जोड़ें
def add_str(str1,str2):
   return str1 + str2

# हम एकाधिक विरासत से निपट रहे हैं
class A(object):
    def foo(self):
        print("class A")

class B(object):
    def foo(self):
        print("class B")

class C(A, B):
    pass

# मल्टीपल इनहेरिटेंस के मामले में पास कैसे काम करता है
class A1(object):
   def foo(self):
      print("class A1")

class B1(A1):
   pass

class C1(A1):
   def foo(self):
      print("class C1")

class D1(B1,C1):
   pass

# सूची परिवर्तनशील हैं
a_list = []
print('ID:', id(a_list))
a_list += [1]
print('ID (+=):', id(a_list))
a_list = a_list + [2]
print('ID (list = list + ...):', id(a_list))

# सभी रिक्त सूचियाँ समान नहीं हैं
a_list = []
print(a_list, '\nID (initial):',id(a_list), '\n')
a_list.append(1)
print(a_list, '\nID (append):',id(a_list), '\n')
a_list.extend([2])
print(a_list, '\nID (extend):',id(a_list))

# डेटाटाइम मॉड्यूल में सही और गलत
from platform import python_version
import datetime

print("Current python version: ", python_version())
print('"datetime.time(0,0,0)" (Midnight) ->', bool(datetime.time(0,0,0))) # Python version <= 3.4.5 evaluates this statement to False

# पायथन छोटे पूर्णांकों के लिए वस्तुओं का पुन: उपयोग करता है - समानता के लिए "==" का उपयोग करें, पहचान के लिए "है"
a = 1
b = 1
print('a is b', bool(a is b))
c = 999
d = 999
print('c is d', bool(c is d))

# समानता ऑपरेटर इस तरह काम करता है
print('256 is 257-1', 256 is 257-1)
print('257 is 258-1', 257 is 258 - 1)
print('-5 is -6+1', -5 is -6+1)
print('-7 is -6-1', -7 is -6-1)

# समानता (==) बनाम पहचान (है) के लिए परीक्षण का वर्णन करें
a = 'hello world!'
b = 'hello world!'
print('a is b,', a is b)
print('a == b,', a == b)

# हम सोचेंगे कि पहचान का अर्थ हमेशा समानता होगा, लेकिन यह हमेशा सच नहीं होता, जैसा कि हम अगले उदाहरण में देख सकते हैं:
a = float('nan')
print('a is a,', a is a)
print('a == a,', a == a)

# अजगर में उथला प्रति
list1 = [1,2]
list2 = list1        # reference
list3 = list1[:]     # shallow copy
list4 = list1.copy() # shallow copy
print('IDs:\nlist1: {}\nlist2: {}\nlist3: {}\nlist4: {}\n'
      .format(id(list1), id(list2), id(list3), id(list4)))

# पायथन में डीपकॉपी

list1 = [[1],[2]]
list2 = list1.copy()    # shallow copy
list3 = deepcopy(list1) # deep copy
print('IDs:\nlist1: {}\nlist2: {}\nlist3: {}\n'
      .format(id(list1), id(list2), id(list3)))

#logical or logical and 
result = (2 or 3) * (5 and 7)
print('2 * 7 =', result)

# कार्यों के लिए डिफ़ॉल्ट तर्क के रूप में परिवर्तनशील वस्तुओं का उपयोग न करें
def append_to_list(value, def_list=[]):
    def_list.append(value)
    return def_list
my_list = append_to_list(1)
print(my_list)

my_other_list = append_to_list(2)
print(my_other_list)

# बहस करो और सो जाओ
import time
def report_arg(my_default=time.time()):
    print(my_default)
report_arg()
time.sleep(5)
report_arg()

# जनरेटर की खपत होती है
gen = (i for i in range(5))
print('2 in gen,', 2 in gen)
print('3 in gen,', 3 in gen)
print('1 in gen,', 1 in gen) 

# जनरेटर को सूची में बदलें
gen = (i for i in range(5))
a_list = list(gen)

# बूल वर्ग का उपयोग
print('isinstance(True, int):', isinstance(True, int))

# लैम्ब्डा फ़ंक्शन का उपयोग करके संख्याओं की सूची बनाएं, लेकिन सही तरीके से नहीं
my_list = [lambda: i for i in range(5)]
for l in my_list:
    print(l())

# सूची बनाकर संख्याओं को ठीक से प्रिंट करें
my_list = [lambda x=i: x for i in range(5)]
for l in my_list:
    print(l())

# स्थानीय गुंजाइश प्रतिनिधित्व
x = 0
def in_func():
    x = 1
    print('in_func:', x)

# वैश्विक स्कोप प्रतिनिधित्व
x = 0
def in_func1():
    x = 1
    print('in_func1:', x)
print('global:', x)

# वैश्विक कीवर्ड का उपयोग
x = 0
def in_func2():
    global x
    x = 1
    print('in_func2:', x)
in_func2()
print('global:', x)

# स्थानीय बनाम संलग्न
def outer():
    x = 1
    print('outer before:', x)

    def inner():
        x = 2
        print("inner:", x)
    inner()
    print("outer after:", x)
outer()

# गैर-स्थानीय कीवर्ड काम आता है
def outer():
    x = 1
    print('outer before:', x)

    def inner():
        nonlocal x
        x = 2
        print("inner:", x)
    inner()
    print("outer after:", x)
outer()

# tuples अपरिवर्तनीय हैं
tup = (1,)
tup[0] += 1

# क्या होगा अगर हम एक अपरिवर्तनीय वस्तु को अपरिवर्तनीय टपल में डालते हैं
tup1 = ([],)
print('tup before: ', tup1)
tup1[0] += [1]


# TypeError को बढ़ाए बिना tuple की परिवर्तनशील सामग्री को संशोधित करने के तरीके हैं
tup = ([],)
print('tup before: ', tup)
tup[0].extend([1])
print('tup after: ', tup)

# टुपल में डेटा जोड़ने का दूसरा तरीका
tup = ([],)
print('tup before: ', tup)
tup[0].append(1)
print('tup after: ', tup)

# न्यूमेरिक्स की तरह टुपल्स जोड़ें
my_tup = (1,)
my_tup += (4,)
my_tup = my_tup + (5,)
print(my_tup)

# पर्दे के "पीछे" क्या होता है कि टपल को संशोधित नहीं किया जाता है, लेकिन हर बार एक नई वस्तु उत्पन्न होती है, जो पुराने "नाम टैग" को विरासत में देगी
my_tup = (1,)
print(id(my_tup))
my_tup += (4,)
print(id(my_tup))
my_tup = my_tup + (5,)
print(id(my_tup))

# एक सादा सूची बनाएँ

def plainlist(n=100000):
    my_list = []
    for i in range(n):
        if i % 5 == 0:
            my_list.append(i)
    return my_list

# एक सूची समझ बनाएँ
def listcompr(n=100000):
    my_list = [i for i in range(n) if i % 5 == 0]
    return my_list

# जेनरेटर बनाएं
def generator(n=100000):
    my_gen = (i for i in range(n) if i % 5 == 0)
    return my_gen

# उपज समारोह का उपयोग कर जेनरेटर
def generator_yield(n=100000):
    for i in range(n):
        if i % 5 == 0:
            yield i

# जेनरेटर सूची समझ से तेज़ हैं
import timeit
def test_plainlist(plain_list):
    for i in plain_list():
        pass


def test_listcompr(listcompr):
    for i in listcompr():
        pass


def test_generator(generator):
    for i in generator():
        pass


def test_generator_yield(generator_yield):
    for i in generator_yield():
        pass
print('plain_list:     ', end='')
%timeit test_plainlist(plainlist)
print('\nlistcompr:     ', end='')
%timeit test_listcompr(listcompr)
print('\ngenerator:     ', end='')
%timeit test_generator(generator)
print('\ngenerator_yield:     ', end='')
%timeit test_generator_yield(generator_yield)

# सार्वजनिक बनाम निजी वर्ग के तरीके और नाम प्रबंधन
    def public_method(self):
        print('Hello public world!')

    def __private_method(self):
        print('Hello private world!')

    def call_private_method_in_class(self):
        self.__private_method()


my_instance = my_class()

my_instance.public_method()
my_instance._my_class__private_method()
my_instance.call_private_method_in_class()

# इसके माध्यम से लूपिंग करते समय किसी सूची को संशोधित करने के परिणाम
a = [1, 2, 3, 4, 5]
for i in a:
    if not i % 2:
        a.remove(i)
print(a)
b = [2, 4, 5, 6]
for i in b:
     if not i % 2:
         b.remove(i)
print(b)

#  सूचकांक द्वारा सूची सूचकांक के माध्यम से पुनरावृति
b = [2, 4, 5, 6]
for index, item in enumerate(b):
    print(index, item)
    if not item % 2:
        b.remove(item)
print(b)

# चर नामों में डायनेमिक बाइंडिंग और टाइपोस
print('first list:')
for i in range(3):
    print(i)
    
print('\nsecond list:')
for j in range(3):
    print(i) # I (intentionally) made typo here!

# "श्रेणी से बाहर" इंडेक्स का उपयोग करके स्लाइसिंग की सूची बनाएं
my_list = [1, 2, 3, 4, 5]
print(my_list[5])

# वैश्विक चर नामों और अनबाउंडलोकल एरर्स का पुन: उपयोग करना
def my_func():
    print(var)
var = 'global'
my_func()

# स्थानीय समकक्ष को प्रभावित किए बिना स्थानीय दायरे में समान चर नाम का उपयोग करने में कोई समस्या नहीं है:
def my_func():
    var = 'locally changed'
var = 'global'
my_func()
print(var)

# यदि हम एक चर नाम का उपयोग करते हैं जो वैश्विक दायरे में होता है, तो हमें सावधान रहना होगा, और यदि हम इस नाम का पुन: उपयोग करना चाहते हैं तो हम इसे स्थानीय कार्य क्षेत्र में एक्सेस करना चाहते हैं
def my_func():
    print(var)  # want to access global variable
    var = 'locally changed'  # but Python thinks we forgot to define the local variable!

var = 'global'
my_func()

# हमें वैश्विक कीवर्ड का उपयोग करना होगा

def my_func():
    global var
    print(var)  # want to access global variable
    var = 'locally changed'  # changes the gobal variable
var = 'global'
my_func()
print(var)

# परिवर्तनशील वस्तुओं की प्रतियां बनाना
my_list1 = [[1, 2, 3]] * 2
print('initially ---> ', my_list1)
my_list1[1][0] = 'a'
print("after my_list1[1][0] = 'a' ---> ", my_list1)

# हमें "नई" वस्तुओं को बेहतर बनाना चाहिए
my_list2 = [[1, 2, 3] for i in range(2)]
print('initially:  ---> ', my_list2)
my_list2[1][0] = 'a'
print("after my_list2[1][0] = 'a':  ---> ", my_list2)

for a, b in zip(my_list1, my_list2):
    print('id my_list1: {}, id my_list2: {}'.format(id(a), id(b)))

# अंत में ब्लॉक में निष्फल बयान
def try_finally1():
    try:
        print('in try:')
        print('do some stuff')
        float('abc')
    except ValueError:
        print('an error occurred')
    else:
        print('no error occurred')
    finally:
        print('always execute finally')
try_finally1()

# मानों के रूप में चरों को प्रकार निर्दिष्ट करना
a_var = str
a_var(123)

# यादृच्छिक पसंद
from random import choice

a, b, c = float, int, str
for i in range(5):
    j = choice([a,b,c])(i)
    print(j, type(j))


# जेनरेटर का केवल पहला खंड तुरंत मूल्यांकन किया जाता है
gen_fails = (i for i in 1/0)

# आलसी मूल्यांकन
gen_succeeds = (i for i in range(5) for j in 1/0)
print('But obviously fails when we iterate ...')
for i in gen_succeeds:
    print(i)

# *args का उपयोग
def a_func(*args):
    print('type of args:', type(args))
    print('args contents:', args)
    print('1st argument:', args[0])
a_func(0, 1, 'a', 'b', 'c')

# kwargs का उपयोग
def b_func(**kwargs):
    print('type of kwargs:', type(kwargs))
    print('kwargs contents: ', kwargs)
    print('value of argument a:', kwargs['a'])

b_func(a=1, b=2, c=3, d=4)

# पुनरावृति की अनपैकिंग
val1, *vals = [1, 2, 3, 4, 5]
print('val1:', val1)
print('vals:', vals)

# अगर और के लिए
for i in range(5):
    if i == 1:
        print('in for')
else:
    print('in else')
print('after for-loop')

# ब्रेक का उपयोग
for i in range(5):
    if i == 1:
        break
else:
    print('in else')
print('after for-loop')

# सशर्त उपयोगकेस
a_list = [1,2]
if a_list[0] == 1:
    print('Hello, World!')
else:
    print('Bye, World!')

# जबकि का उपयोग
i = 0
while i < 2:
    print(i)
    i += 1
else:
    print('in else')

# स्ट्रिंग का इंटर्निंग
hello1 = 'Hello'
hello2 = 'Hell' + 'o'
hello3 = 'Hell'
hello3 = hello3 + 'o'
print('hello1 is hello2:', hello1 is hello2)
print('hello1 is hello3:', hello1 is hello3)

# उदाहरण डॉकस्ट्रिंग के उपयोग को प्रदर्शित करने के लिए
def greet(name):
    """
    This function greets to
    the person passed in as
    a parameter
    """
    print("Hello, " + name + ". Good morning!")

# निरपेक्ष कार्य
def absolute_value(num):
    """This function returns the absolute
    value of the entered number"""

    if num >= 0:
        return num
    else:
        return -num
print(absolute_value(2))
print(absolute_value(-4))

# शब्दकोश का उपयोग
dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
print "dict['Name']: ", dict['Name']
print "dict['Age']: ", dict['Age']

# उपयोगकर्ता इनपुट स्वीकार करें
str = input("Enter your input: ")
print ("Received input is : ", str)

# Nth कैटलन नंबर खोजने के लिए एक पुनरावर्ती कार्य
def catalan(n): 
    # Base Case 
    if n <= 1: 
        return 1
  
    # Catalan(n) is the sum  
    # of catalan(i)*catalan(n-i-1) 
    res = 0
    for i in range(n): 
        res += catalan(i) * catalan(n-i-1) 
  
    return res 
  
for i in range(10): 
    print (catalan(i))

# एक सहज पुनरावर्ती पायथन कार्यान्वयन
  
def binomialCoeff(n , k): 
  
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1
  
    # Recursive Call 
    return binomialCoeff(n-1 , k-1) + binomialCoeff(n-1 , k) 

n = 5
k = 2
print ("Value of C(%d,%d) is (%d)" %(n , k , binomialCoeff(n , k)) )

# एलआईएस समस्या का एक सहज पायथन कार्यान्वयन

global maximum 
  
def _lis(arr , n ): 
  
    # to allow the access of global variable 
    global maximum 
  
    # Base Case 
    if n == 1 : 
        return 1
  
    # maxEndingHere is the length of LIS ending with arr[n-1] 
    maxEndingHere = 1
  
    """Recursively get all LIS ending with arr[0], arr[1]..arr[n-2] 
       IF arr[n-1] is maller than arr[n-1], and max ending with 
       arr[n-1] needs to be updated, then update it"""
    for i in range(1, n): 
        res = _lis(arr , i) 
        if arr[i-1] < arr[n-1] and res+1 > maxEndingHere: 
            maxEndingHere = res +1
  
    # Compare maxEndingHere with overall maximum. And 
    # update the overall maximum if needed 
    maximum = max(maximum , maxEndingHere) 
  
    return maxEndingHere 
  
def lis(arr): 
  
    # to allow the access of global variable 
    global maximum 
  
    # lenght of arr 
    n = len(arr) 
  
    # maximum variable holds the result 
    maximum = 1
  
    # The function _lis() stores its result in maximum 
    _lis(arr , n) 
  
    return maximum 
  
arr = [10 , 22 , 9 , 33 , 21 , 50 , 41 , 60] 
n = len(arr) 
print ("Length of lis is ", lis(arr) )

# nवें फाइबोनैचि संख्या के लिए कार्य

def Fibonacci(n): 
    if n<0: 
        print("Incorrect input") 
    # First Fibonacci number is 0 
    elif n==0: 
        return 0
    # Second Fibonacci number is 1 
    elif n==1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
  
print(Fibonacci(9)) 

# समान लंबाई की दो सूची जोड़ने के लिए एक पायथन प्रोग्राम लिखें
def add_two_list_items():
    num1 = [1,2,3]
    num2 = [4,5,6]
    sum = num1 + num2
    print(f'Sum: {sum}')


# यदि पहली सूची का आइटम सम है और दूसरी सूची का आइटम विषम है, तो दो सूची से संख्याएँ जोड़ने के लिए एक पायथन प्रोग्राम लिखें
def add_two_lists_even_odd(l1, l2):
    new = []
    for x, y in zip(l1, l2):
        if l1%2 == 0 and l2%2 != 0:
            new.append(x+y)
    return new

# एक पायथन कार्यक्रम लिखें KM/H को MPH में बदलें
kmh = 50
mph =  0.6214 * kmh
print("Speed:", kmh, "KM/H = ", mph, "MPH")

# तीन संख्याओं में से सबसे छोटी संख्या को खोजने और प्रिंट करने के लिए एक प्रोग्राम लिखें
num1 = 100
num2 = 200
num3 = 300
if (num1 <= num2) and (num1 <= num3):
    smallest = num1
elif (num2 <= num1) and (num2 <= num3):
    smallest = num2
else:
    smallest = num3
print(f'smallest:{smallest}')

# सूची को क्रमबद्ध करने के लिए एक फ़ंक्शन लिखें
raw_list = [-5, -23, 5, 0, 23, -6, 23, 67]
sorted_list = []
while raw_list:
    minimum = raw_list[0]   
    for x in raw_list: 
        if x < minimum:
            minimum = x
    sorted_list.append(minimum)
    raw_list.remove(minimum)    

print(soreted_list)

# किसी फ़ंक्शन को चलाने में लगने वाले समय को प्रिंट करने के लिए एक फ़ंक्शन लिखें
import time
def time_it(fn, *args, repetitons= 1, **kwargs):
    start = time.perf_counter()
    if (repetitons <= 0):
        raise ValueError("repetitions should be greater that 0")
    if (not(isinstance(repetitons,int))):
        raise ValueError("Repetions must be of type Integer")
    for _ in range(repetitons):
        fn(*args, **kwargs)
    stop = time.perf_counter()
    return ((stop - start)/repetitons)



# साधारण ब्याज की गणना करने के लिए एक पायथन फ़ंक्शन लिखें
def simple_interest(p,t,r): 
   
    si = (p * t * r)/100
    return si 

# अंतराल में सभी प्राइम नंबरों को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
start = 11
end = 25
 
for i in range(start,end):
  if i>1:
    for j in range(2,i):
        if(i % j==0):
            break
    else:
        print(i)

# क्लोजर कॉन्सेप्ट का उपयोग करके शब्द को कितनी बार दोहराया गया है, यह रिकॉर्ड करने के लिए एक काउंटर को लागू करने के लिए एक पायथन फंक्शन लिखें
def word_counter():
    counter = {}
    def count(word):
        counter[word] = counter.get(word, 0) + 1
        return counter[word]
    return count

# एक स्ट्रिंग पैलिंड्रोम है या नहीं, यह जांचने और प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
st = 'malayalam'
j = -1
flag = 0
for i in st:
    if i != st[j]:
      j = j - 1
      flag = 1
      break
    j = j - 1
if flag == 1:
    print("Not a palindrome")
else:
    print("It is a palindrome")

# नियमित अभिव्यक्ति का उपयोग करके इनपुट स्ट्रिंग से URL खोजने के लिए एक पायथन फ़ंक्शन लिखें
import re 
def Find(string): 
    regex = r"(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\".,<>?«»“”‘’]))"
    url = re.findall(regex,string)       
    return [x[0] for x in url] 
      
# सूची से एन सबसे बड़े तत्वों को खोजने के लिए एक पायथन प्रोग्राम लिखें
l = [1000,298,3579,100,200,-45,900] 
n = 4
l.sort() 
print(l[-n:])

# मानचित्र और लैम्ब्डा का उपयोग करके दो सूचियाँ जोड़ने के लिए एक पायथन प्रोग्राम लिखें
nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
result = map(lambda x, y: x + y, nums1, nums2)
print(list(result))

# फ्लोट नंबरों की समानता का परीक्षण करने के लिए एक पायथन फ़ंक्शन लिखें
def float_equality_testing(a, b):
    
    rel_tol = 1e-12
    abs_tol = 1e-05
    return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)

# बहुभुज क्षेत्र को कैलकुलेट करने के लिए एक पायथन फ़ंक्शन लिखें
def polygon_area( side_length, sides = 3):
    if(sides < 3 or sides > 6 ):
        raise ValueError("number of sides must be greater than 2 and less than 7")
    if(side_length < 0 ):
        raise ValueError("side length must be positive")

    return sides * (side_length ** 2) / (4 * tan(pi / sides))

# सूचियों की दी गई सूची से सकारात्मक तत्व प्राप्त करने के लिए एक पायथन प्रोग्राम लिखें
Input = [[10, -11, 222], [42, -222, -412, 99, -87]] 
temp = map(lambda elem: filter(lambda a: a>0, elem), Input) 
Output = [[a for a in elem if a>0] for elem in temp] 

# एक सूची से खाली टुपल्स को हटाने के लिए प्रोग्राम लिखें
def Remove(tuples): 
    tuples = filter(None, tuples) 
    return tuples

# किसी सूची का संचयी योग खोजने के लिए एक पायथन प्रोग्राम लिखें
list=[10,20,30,40,50]
new_list=[] 
j=0
for i in range(0,len(list)):
    j+=list[i]
    new_list.append(j) 
print(new_list)

# सूची को स्ट्रिंग में बदलने के लिए एक पायथन फ़ंक्शन लिखें
s = ['I', 'want', 4, 'apples', 'and', 18, 'bananas'] 
listToStr = ' '.join(map(str, s)) 
print(listToStr)

# 2 शब्दकोशों को मर्ज करने के लिए एक पायथन प्रोग्राम लिखें
x = {'a' : 1, 'b' : 2, 'c' : 3}
y = {'x' : 10, 'y' : 20, 'z' : 30 }
z = {**x , **y}

# सिग्मॉइड फ़ंक्शन को लागू करने के लिए एक पायथन कोड लिखें
import math
def sigmoid(x):
  return 1 / (1 + math.exp(-x))

# RELU फ़ंक्शन को लागू करने के लिए एक पायथन कोड लिखें
def relu(array):
    return [max(0,i) for i in array if(isinstance(i, int) or isinstance(i, float))]

# दी गई संख्या फाइबोनैचि है या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def fiboacci_number_check(n):
    if(isinstance(n,int)):
        result = list(filter(lambda num : int(math.sqrt(num)) * int(math.sqrt(num)) == num, [5*n*n + 4,5*n*n - 4] ))
        return bool(result) 
    else:
        raise TypeError("Input should be of type Int") 

# एक स्ट्रिंग में सभी स्वरों को निकालने के लिए एक पायथन प्रोग्राम लिखें
string = "Remove Vowel"
vowel = ['a', 'e', 'i', 'o', 'u']
"".join([i for i in string if i not in vowel]

# अगला फिबोनैकी नंबर देने के लिए एक पायथन प्रोग्राम लिखें

    num_1, num_2,count = 0, 1,0

    def next_fibbonacci_number() :
    
        nonlocal num_1, num_2, count

        if(count == 0):
            count+=1
            return 0
        elif(count==1):
            count+=1
            return num_2
        else:
            num_1, num_2 = num_2, num_1+num_2
            return num_2

    return next_fibbonacci_number
# किसी दिए गए नंबर के भाज्य की गणना करने के लिए एक पायथन फ़ंक्शन लिखें
def factorial(n):
    fact = 1
    for num in range(2, n + 1):
        fact = fact * num
    return(fact)

# एक पायथन प्रोग्राम लिखें जो ऐसी सभी संख्याएँ खोजेगा जो 7 से विभाज्य हैं लेकिन 2000 और 3200 के बीच 5 से अधिक नहीं हैं (दोनों शामिल हैं)
l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

print(','.join(l))

# 0 और 9 के बीच एक यादृच्छिक संख्या उत्पन्न करने के लिए पायथन प्रोग्राम लिखें
import csv
def read_csv(input_file):
    with open(input_file) as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        for row in csv_reader:
                print(f'{row}')
                break

# एक यादृच्छिक संख्या उत्पन्न करने के लिए एक पायथन प्रोग्राम लिखें
import random
print(random.randint(0,9))

# लीप वर्ष की जाँच करने के लिए एक पायथन प्रोग्राम लिखें
year = 2000
if (year % 4) == 0:
   if (year % 100) == 0:
       if (year % 400) == 0:
           print(f"{year} is a leap year")
       else:
           print(f"{year} is not a leap year")
   else:
       print(f"{year} is a leap year")
else:
   print(f"{year} is not a leap year")

# LCM की गणना करने के लिए एक पायथन फ़ंक्शन लिखें
def compute_lcm(x, y):
   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm
# GCD की गणना करने के लिए एक पायथन फ़ंक्शन लिखें
def compute_gcd(x, y):

   while(y):
       x, y = y, x % y
   return x

# एक स्ट्रिंग से विराम चिह्नों को हटाने के लिए एक पायथन प्रोग्राम लिखें
punctuations = '''!()-[]{};:'"\,<>./?@#$%^&*_~'''
my_str = "Hello!!!, he said ---and went."
no_punct = ""
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char
print(no_punct)

# फ़ाइल का हैश खोजने के लिए एक पायथन फ़ंक्शन लिखें
import hashlib
def hash_file(filename):

   h = hashlib.sha1()
   with open(filename,'rb') as file:
       chunk = 0
       while chunk != b'':
           chunk = file.read(1024)
           h.update(chunk)
   return h.hexdigest()

# जेपीईजी छवि के आकार (रिज़ॉल्यूशन) को खोजने के लिए एक पायथन प्रोग्राम लिखें और इसे प्रिंट करें
def jpeg_res(filename):
   with open(filename,'rb') as img_file:
       img_file.seek(163)

       a = img_file.read(2)

       # calculate height
       height = (a[0] << 8) + a[1]

       # next 2 bytes is width
       a = img_file.read(2)

       # calculate width
       width = (a[0] << 8) + a[1]

   print("The resolution of the image is",width,"x",height)

# प्रत्येक स्वर की संख्या गिनने के लिए एक पायथन प्रोग्राम लिखें
ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}
print(count)

# चरित्र के ASCII मूल्य का पता लगाने के लिए एक अजगर कार्यक्रम लिखें
c = 'p'
print("The ASCII value of '" + c + "' is", ord(c))

# द्विघात समीकरण को हल करने के लिए एक पायथन प्रोग्राम लिखें
import cmath
a = 1
b = 5
c = 6
d = (b**2) - (4*a*c)
sol1 = (-b-cmath.sqrt(d))/(2*a)
sol2 = (-b+cmath.sqrt(d))/(2*a)
print('The solution are {0} and {1}'.format(sol1,sol2))

# सेल्सियस को फ़ारेनहाइट में बदलने के लिए एक पायथन प्रोग्राम लिखें
celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(f'{celsius} degree Celsius is equal to {fahrenheit} degree Fahrenheit')

# एन अंकों की आर्मस्ट्रांग संख्या की जांच के लिए एक पायथन प्रोग्राम लिखें
num = 1634
order = len(str(num))
sum = 0
temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** order
   temp //= 10
if num == sum:
   print(num,"is an Armstrong number")
else:
   print(num,"is not an Armstrong number")

# प्राकृतिक संख्याओं का योग ज्ञात करने के लिए एक पायथन प्रोग्राम लिखें
num = 16
if num < 0:
   print("Enter a positive number")
else:
   sum = 0
   while(num > 0):
       sum += num
       num -= 1
   print("The sum is", sum)

# कार्ड के डेक को शफल करने के लिए एक पायथन प्रोग्राम लिखें
import itertools, random
deck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))
random.shuffle(deck)
print(deck)

# दशमलव को बाइनरी में बदलने के लिए एक पायथन फ़ंक्शन लिखें
def convertToBinary(n):
   if n > 1:
       convertToBinary(n//2)
   print(n % 2,end = '')

# wrtie a python function to solve Tower Of Hanoi and print necessary statements
def TowerOfHanoi(n , source, destination, auxiliary): 
    if n==1: 
        print("Move disk 1 from source",source,"to destination",destination) 
        return
    TowerOfHanoi(n-1, source, auxiliary, destination) 
    print("Move disk",n,"from source",source,"to destination",destination) 
    TowerOfHanoi(n-1, auxiliary, destination, source) 

# एक वर्ष में हर दिन होने वाली संख्या का पता लगाने के लिए एक पायथन फ़ंक्शन लिखें और उन्हें प्रिंट करें
import datetime  
import calendar 
   
def day_occur_time(year): 
    days = [ "Monday", "Tuesday", "Wednesday",   
           "Thursday",  "Friday", "Saturday",  
           "Sunday" ] 
    L = [52 for i in range(7)] 

    pos = -1
    day = datetime.datetime(year, month = 1, day = 1).strftime("%A") 
    for i in range(7): 
        if day == days[i]: 
            pos = i 
    if calendar.isleap(year): 
        L[pos] += 1
        L[(pos+1)%7] += 1       
    else: 
        L[pos] += 1

    for i in range(7): 
        print(days[i], L[i])

# रेंज में सभी पायथागॉरियन ट्रिपल को निर्धारित करने के लिए एक पायथन प्रोग्राम लिखें
limit= 50
c=0
m=2
while(c<limit):
    for n in range(1,m+1):
        a=m*m-n*n
        b=2*m*n
        c=m*m+n*n
        if(c>limit):
            break
        if(a==0 or b==0 or c==0):
            break
        print(a,b,c)
    m=m+1

# बाइनरी को ग्रे कोड में बदलने का कार्य
def binary_to_gray(n):
    n = int(n, 2) 
    n ^= (n >> 1)
    return bin(n)[2:]

# दो सूचियों के प्रतिच्छेदन को खोजने के लिए एक पायथन फ़ंक्शन लिखें
def intersection(a, b):
    return list(set(a) & set(b))

# डिक्शनरी से दी गई कुंजी को निकालने के लिए एक पायथन प्रोग्राम लिखें
d = {'a':1,'b':2,'c':3,'d':4}
key= 'd'
if key in d: 
    del d[key]
else:
    print("Key not found!")
    exit(0)

# टेक्स्ट फ़ाइल में शब्दों की संख्या गिनने के लिए एक पायथन फ़ंक्शन लिखें और इसे प्रिंट करें
def word_count(fname) : 
    num_words = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
    print(num_words)

# किसी संख्या में काउंट सेट बिट्स के लिए एक पायथन फ़ंक्शन लिखें
def count_set_bits(n):
    count = 0
    while n:
        n &= n - 1
        count += 1
    return count

# रिकर्सन का उपयोग किए बिना सूची को समतल करने के लिए एक पायथन प्रोग्राम लिखें
a=[[1,[[2]],[[[3]]]],[[4],5]]
flatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]
print(flatten(a))

# पिरामिड पैटर्न को प्रिंट करने के लिए एक पायथन फंक्शन लिखें
def pyramid_pattern(symbol='*', count=4):
    for i in range(1, count + 1):
        print(' ' * (count - i) + symbol * i, end='')
        print(symbol * (i - 1) + ' ' * (count - i))


# किसी दिए गए फ़ाइल में दिए गए शब्द की घटना को गिनने के लिए एक पायथन फ़ंक्शन लिखें
def check_word_count(word, file):
    if not os.path.isfile(file):
        raise FileNotFoundError
    if not isinstance(word, str):
        raise TypeError

    with open(file, 'r') as f:
        lines = f.readlines()
        words = [l.strip().split(' ') for l in lines]
        words = [word for sublist in words for word in sublist]
        c = Counter(words)
    return c.get(word, 0)


# दी गई लंबाई के साथ सूची से क्रमपरिवर्तन करने के लिए एक पायथन फ़ंक्शन लिखें
def get_permutations(data_list, l=2):
    return list(permutations(data_list, r=l))


# लेक्सिकोग्राफिक क्रमबद्ध क्रम में स्ट्रिंग के आकार के सभी संभावित क्रमपरिवर्तन प्राप्त करने के लिए एक पायथन प्रोग्राम लिखें
def get_ordered_permutations(word, k):
    [print(''.join(x)) for x in sorted(list(permutations(word, int(k))))]


# लेक्सिकोग्राफिक सॉर्ट किए गए क्रम में स्ट्रिंग के आकार तक, सभी संभावित संयोजन प्राप्त करने के लिए एक पायथन प्रोग्राम लिखें
def get_ordered_combinations(string, k):
    [print(''.join(x)) for i in range(1, int(k) + 1) for x in combinations(sorted(string), i)]


# लेक्सिकोग्राफिक क्रमबद्ध क्रम में स्ट्रिंग के सभी संभावित आकार प्रतिस्थापन संयोजन प्राप्त करने के लिए एक पायथन फ़ंक्शन लिखें
def get_ordered_combinations_with_replacement(string, k):
    [print(''.join(x)) for x in combinations_with_replacement(sorted(string), int(k))]



# दिए गए शिफ्ट मान के साथ सीज़र सिफर के लिए एक पायथन फ़ंक्शन लिखें और संशोधित टेक्स्ट वापस करें
def caesar_cipher(text, shift=1):
    alphabet = string.ascii_lowercase
    shifted_alphabet = alphabet[shift:] + alphabet[:shift]
    table = str.maketrans(alphabet, shifted_alphabet)
    return text.translate(table)


# सभी अक्षरों के मामले को स्वैप करने के लिए स्ट्रिंग के लिए एक पायथन फ़ंक्शन लिखें
def swap_case(s):
    return ''.join(x for x in (i.lower() if i.isupper() else i.upper() for i in s))


# उपयोगकर्ता से दो सेटों के बीच सममित अंतर प्राप्त करने के लिए एक पायथन फ़ंक्शन लिखें
def symmetric_diff_sets():
    M, m = input(), set(list(map(int, input().split())))
    N, n = input(), set(list(map(int, input().split())))
    s = sorted(list(m.difference(n)) + list(n.difference(m)))
    for i in s:
        print(i)


# दिया गया सेट सबसेट है या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def check_subset():
    for _ in range(int(input())):
        x, a, z, b = input(), set(input().split()), input(), set(input().split())
    print(a.issubset(b))


# बेसिक HTML पार्सर के लिए एक पायथन प्रोग्राम लिखें
from html.parser import HTMLParser


class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            print("->", attr[0], ">", attr[1])


parser = MyHTMLParser()

for i in range(int(input())):
    parser.feed(input())


# NLTK का उपयोग कर नामांकित इकाई पहचानकर्ता के लिए एक पायथन फ़ंक्शन लिखें
def ner_checker(texts):
    all_set = set()

    def nltk_ner_check(texts):
        for i, text in texts:
            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):
                if isinstance(entity, nltk.tree.Tree):
                    etext = " ".join([word for word, tag in entity.leaves()])
                    # label = entity.label()
                    all_set.add(etext)

    nltk_ner_check(texts=texts)
    return all_set


# किसी दिए गए स्ट्रिंग को संपीड़ित करने के लिए एक फ़ंक्शन लिखें। मान लीजिए कि एक वर्ण 'c' स्ट्रिंग में लगातार X बार आता है। स्ट्रिंग में वर्ण 'c' की इन लगातार घटनाओं को (X, c) से बदलें
def compress(text):
    from itertools import groupby
    for k, g in groupby(text):
        print("({}, {})".format(len(list(g)), k), end=" ")


# किसी दिए गए स्ट्रिंग 'एन' बार की पुनरावृत्ति में 'ए' को गिनने के लिए एक पायथन फ़ंक्शन लिखें
def repeated_string(s, n):
    return s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')


# दिए गए स्ट्रिंग के सभी सबस्ट्रिंग्स को खोजने के लिए एक पायथन फ़ंक्शन लिखें जिसमें 2 या अधिक स्वर हों। साथ ही, इन सबस्ट्रिंग्स को 2 व्यंजनों के बीच में होना चाहिए और इसमें केवल स्वर होने चाहिए
def find_substr():
    import re
    v = "aeiou"
    c = "qwrtypsdfghjklzxcvbnm"
    m = re.findall(r"(?<=[%s])([%s]{2,})[%s]" % (c, v, c), input(), flags=re.I)
    print('\n'.join(m or ['-1']))


# एक पायथन फ़ंक्शन लिखें जो पांच सकारात्मक पूर्णांक देता है और न्यूनतम और अधिकतम मान ज्ञात करता है जिसे पांच पूर्णांकों में से चार को जोड़कर गणना की जा सकती है
def min_max():
    nums = [int(x) for x in input().strip().split(' ')]
    print(sum(nums) - max(nums), sum(nums) - min(nums))


# (i, j) जोड़े की संख्या खोजने के लिए एक पायथन फ़ंक्शन लिखें जहां i<j और ar[i]+ar[j] डेटा सूची में k द्वारा विभाज्य है
def divisible_sum_pairs(arr, k):
    count = 0
    n = len(arr)
    for i in range(n - 1):
        j = i + 1
        while j < n:
            if ((arr[i] + arr[j]) % k) == 0:
                count += 1
            j += 1
    return count


import math


# एक वृत्त के क्षेत्रफल की गणना करने के लिए एक अजगर वर्ग लिखें और एक त्रिज्या के लिए घाटी को प्रिंट करें
class CircleArea:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius * self.radius


r = 2
obj = CircleArea(r)
print("Area of circle:", obj.area())


# टेक्स्ट फ़ाइल में शब्दों की संख्या गिनने के लिए एक पायथन फ़ंक्शन लिखें
def check_words():
    fname = input("file name: ")
    num_words = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
    print("Number of words = ", num_words)


# पाठ फ़ाइल में पंक्तियों की संख्या गिनने के लिए एक पायथन फ़ंक्शन लिखें
def check_lines():
    fname = input("file name: ")
    num_lines = 0
    with open(fname, 'r') as f:
        for line in f:
            num_lines += 1
    print("Number of lines = ", num_lines)


# एक टेक्स्ट फ़ाइल में रिक्त स्थान की संख्या की गणना करने वाला एक पायथन फ़ंक्शन लिखें
def count_blank_space():
    fname = input("file name:")
    count = 0
    with open(fname, 'r') as f:
        for line in f:
            count += line.count(' ')
    return count


# 2 स्ट्रिंग एनाग्राम हैं या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def anagram(s1, s2):
    if sorted(s1) == sorted(s2):
        return True
    else:
        return False


# किसी सूची से डुप्लिकेट आइटम निकालने और संशोधित डेटा सूची वापस करने के लिए एक पायथन फ़ंक्शन लिखें
def remove_duplicates(data):
    c = Counter(data)
    s = set(data)
    for item in s:
        count = c.get(item)
        while count > 1:
            data.pop(item)
            count -= 1
    return data


# पाठ में सबसे आम शब्द प्राप्त करने के लिए एक पायथन फ़ंक्शन लिखें
def most_common(text):
    c = Counter(text)
    return c.most_common(1)


# दी गई पारियों द्वारा दिए गए बिन नंबर पर बिटवाइज़ गुणा करने के लिए एक पायथन फ़ंक्शन लिखें
def bit_mul(n, shift):
    return n << shift


# दिए गए बदलावों की संख्या के साथ बिटवाइज़ डिवीजन के लिए एक पायथन फ़ंक्शन लिखें
def bit_div(n, shift):
    return n >> shift


# कतार को लागू करने के लिए एक पायथन प्रोग्राम लिखें
from collections import deque

class Queue():
    '''
    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and
    dequeueing in worst-case O(1) time.
    '''


    def __init__(self, max_size = 10):
        '''
        Initialize this queue to the empty queue.

        Parameters
        ----------
        max_size : int
            Maximum number of items contained in this queue. Defaults to 10.
        '''

        self._queue = deque(maxlen=max_size)


    def enqueue(self, item):
        '''
        Queues the passed item (i.e., pushes this item onto the tail of this
        queue).

        If this queue is already full, the item at the head of this queue
        is silently removed from this queue *before* the passed item is
        queued.
        '''

        self._queue.append(item)


    def dequeue(self):
        '''
        Dequeues (i.e., removes) the item at the head of this queue *and*
        returns this item.

        Raises
        ----------
        IndexError
            If this queue is empty.
        '''

        return self._queue.pop()


# संख्याओं की दो सूचियों के बीच डॉट उत्पाद प्राप्त करने के लिए एक पायथन फ़ंक्शन लिखें
def dot_product(a, b):
    return sum(e[0] * e[1] for e in zip(a, b))


# किसी दिए गए स्ट्रिंग से विराम चिह्न निकालने के लिए एक पायथन फ़ंक्शन लिखें
def strip_punctuations(s):
    return s.translate(str.maketrans('', '', string.punctuation))


# एक पायथन फ़ंक्शन लिखें जो एक स्ट्रिंग में सबसे बड़ा चरित्र लौटाता है
from functools import reduce


def biggest_char(string):
    if not isinstance(string, str):
        raise TypeError
    return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)


# संख्या में अंकों की संख्या गिनने के लिए एक पायथन फ़ंक्शन लिखें
def count_digits():
    n = int(input("Enter number:"))
    count = 0
    while n > 0:
        count = count + 1
        n = n // 10
    return count


# एक स्ट्रिंग में स्वरों की संख्या गिनने के लिए एक पायथन फ़ंक्शन लिखें
def count_vowels(text):
    v = set('aeiou')
    for i in v:
        print(f'\n {i} occurs {text.count(i)} times')


# बाहरी आईपी पता जांचने के लिए एक पायथन फ़ंक्शन लिखें
def check_ip():
    import re
    import urllib.request as ur
    url = "http://checkip.dyndns.org"
    with ur.urlopen(url) as u:
        s = str(u.read())
        ip = re.findall(r"\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}", s)
        print("IP Address: ", ip[0])
        return ip[0]


# कुछ अजीब सम्मोहन पाठ के लिए एक अजगर कार्य लिखें
def weird():
    import random

    def getlength(script):
        return sum((i['length'] for i in script))

    def truncate(target_length, script):
        if getlength(script) > target_length:
            script = sorted(script, key=lambda k: (k['priority'], -k['length']))[:-1]
            return truncate(target_length, script)
        return sorted(script, key=lambda k: k['index'])

    def as_text(script):
        return "\n".join([i['text'] for i in script])

    priorities_and_sentences = [
        (1, "...now... sitting comfortably in the chair"),
        (2, "...with your feet still flat on the ground"),
        (3, "...back straight and head up right"),
        (2, "...make these adjustments now if you need to"),
        (3, "... pause.............................."),
        (1, "...your eyes ...still ...comfortably closed"),
        (2, "...nice and relaxed...comfortable and relaxed..."),
        (3, "... pause......................................."),
        (1, "...now...I want you to notice...how heavy your head is starting to feel..."),
        (1, "how heavy your head feels..."),
        (3, "... pause......................................."),
        (2, "really noticing the weight... of your head..."),
        (3,
         "and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable"),
    ]

    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in
                  enumerate(priorities_and_sentences)]

    print(as_text(truncate(500, scriptlist)))
    print(as_text(truncate(300, scriptlist)))
    print(as_text(truncate(200, scriptlist)))


# पासा रोल के लिए एक पायथन फ़ंक्शन लिखें जो उपयोगकर्ता को इनपुट जारी रखने के लिए कह रहा है और यादृच्छिक रूप से आउटपुट देता है
def dice():
    import random
    min = 1
    max = 6
    roll_again = 'y'

    while roll_again == "yes" or roll_again == "y":
        print("Rolling the dice...")
        print(random.randint(min, max))
        roll_again = input("Roll the dices again?")


from cryptography.fernet import Fernet


# क्रिप्टोग्राफी मॉड्यूल का उपयोग करके, कुंजी पीढ़ी के साथ 'सुरक्षित' वर्ग के भीतर सुविधाओं को एन्क्रिप्ट और डिक्रिप्ट करने के लिए एक पायथन प्रोग्राम लिखें
class Secure:
    def __init__(self):
        """
           Generates a key and save it into a file
        """
        key = Fernet.generate_key()
        with open("secret.key", "wb") as key_file:
            key_file.write(key)

    @staticmethod
    def load_key():
        """
        Load the previously generated key
        """
        return open("secret.key", "rb").read()

    def encrypt_message(self, message):
        """
        Encrypts a message
        """
        key = self.load_key()
        encoded_message = message.encode()
        f = Fernet(key)
        encrypted_message = f.encrypt(encoded_message)
        print("\nMessage has been encrypted: ", encrypted_message)
        return encrypted_message

    def decrypt_message(self, encrypted_message):
        """
        Decrypts an encrypted message
        """
        key = self.load_key()
        f = Fernet(key)
        decrypted_message = f.decrypt(encrypted_message)
        print("\nDecrypted message:", decrypted_message.decode())


s = Secure()
encrypted = s.encrypt_message("My deepest secret!")
s.decrypt_message(encrypted)


# दिए गए पाठ के लिए SHA256 उत्पन्न करने के लिए एक पायथन फ़ंक्शन लिखें
def get_sha256(text):
    import hashlib
    return hashlib.sha256(text).hexdigest()


# SHA256 हैशेड मान दिए गए डेटा के लिए मान्य है या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def check_sha256_hash(hashed, data):
    import hashlib
    return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False


# किसी दिए गए यूआरएल के लिए एचटीएमएल कोड प्राप्त करने के लिए एक पायथन फ़ंक्शन लिखें
def get_html(url="http://www.python.org"):
    import urllib.request

    fp = urllib.request.urlopen(url)
    mybytes = fp.read()
    mystr = mybytes.decode("utf8")
    fp.close()
    print(mystr)


# प्रत्येक दिए गए 'अंतराल' सेकंड के बाद बिटकॉइन की कीमतें प्राप्त करने के लिए एक पायथन फ़ंक्शन लिखें
def get_btc_price(interval=5):
    import requests
    import json
    from time import sleep

    def getBitcoinPrice():
        URL = "https://www.bitstamp.net/api/ticker/"
        try:
            r = requests.get(URL)
            priceFloat = float(json.loads(r.text)["last"])
            return priceFloat
        except requests.ConnectionError:
            print("Error querying Bitstamp API")

    while True:
        print("Bitstamp last price: US $ " + str(getBitcoinPrice()) + "/BTC")
        sleep(interval)


# 2015 से 2020-12 तक किसी कंपनी के लिए स्टॉक मूल्य प्राप्त करने के लिए एक पायथन फ़ंक्शन लिखें
def get_stock_prices(tickerSymbol='TSLA'):
    import yfinance as yf

    # get data on this ticker
    tickerData = yf.Ticker(tickerSymbol)

    # get the historical prices for this ticker
    tickerDf = tickerData.history(period='1d', start='2015-1-1', end='2020-12-20')

    # see your data
    print(tickerDf)


# ऐप्पल आईट्यून्स पर 10 सर्वश्रेष्ठ कलाकारों को खेलने के लिए एक पायथन फ़ंक्शन लिखें
def get_artists():
    import requests
    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'
    response = requests.get(url)
    data = response.json()
    for artist_dict in data['feed']['entry']:
        artist_name = artist_dict['im:artist']['label']
        print(artist_name)


# TFIDF वेक्टराइज़र का उपयोग करके उपयोगकर्ता परीक्षण कॉर्पस से प्रमुख शब्द प्राप्त करने के लिए एक पायथन फ़ंक्शन लिखें
def get_words(corpus, new_doc, top=2):
    import numpy as np
    from sklearn.feature_extraction.text import TfidfVectorizer

    tfidf = TfidfVectorizer(stop_words='english')
    if not corpus:
        corpus = [
            'I would like to check this document',
            'How about one more document',
            'Aim is to capture the key words from the corpus',
            'frequency of words in a document is called term frequency'
        ]

    X = tfidf.fit_transform(corpus)
    feature_names = np.array(tfidf.get_feature_names())

    if not new_doc:
        new_doc = ['can key words in this new document be identified?',
                   'idf is the inverse document frequency calculated for each of the words']
    responses = tfidf.transform(new_doc)

    def get_top_tf_idf_words(response, top_n=top):
        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]
        return feature_names[response.indices[sorted_nzs]]

    print([get_top_tf_idf_words(response, 2) for response in responses])


# दिए गए पाठ या फ़ाइल पर वर्डक्लाउड उत्पन्न करने के लिए एक पायथन फ़ंक्शन लिखें
import os


def get_word(data):
    if not (isinstance(data, str) or os.path.isfile(data)):
        raise TypeError("Text must be string or a File object.")
    from wordcloud import WordCloud, STOPWORDS
    import matplotlib.pyplot as plt
    stopwords = set(STOPWORDS)
    if os.path.isfile(data):
        with open(data, 'r') as f:
            data = f.read()

    data = ' '.join(data.lower().split(' '))
    wordcloud = WordCloud(width=400, height=400,
                          background_color='white',
                          stopwords=stopwords,
                          min_font_size=15).generate(data)

    # plot the WordCloud image
    plt.figure(figsize=(8, 8), facecolor=None)
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.tight_layout(pad=0)

    plt.show()


# कुंजी में से किसी एक पर डेटा संरचना में प्रत्येक आइटम को सॉर्ट करने के लिए एक पायथन फ़ंक्शन लिखें
def sort_list_with_key():
    animals = [
        {'type': 'lion', 'name': 'Mr. T', 'age': 7},
        {'type': 'tiger', 'name': 'scarface', 'age': 3},
        {'type': 'puma', 'name': 'Joe', 'age': 4}]
    print(sorted(animals, key=lambda animal: -animal['age']))


# एक अनंत अनुक्रम के लिए जनरेटर के साथ एक पायथन फ़ंक्शन लिखें
def infinite_sequence():
    n = 0
    while True:
        yield n
        n += 1


# क्रिप्टोग्राफिक रूप से मजबूत छद्म-यादृच्छिक डेटा उत्पन्न करने के लिए एक पायथन फ़ंक्शन लिखें
def get_cryptographically_secure_data(n=101):
    return secrets.token_bytes(n), secrets.token_hex(n)


# बाइट को यूटीएफ -8 में बदलने के लिए एक पायथन फ़ंक्शन लिखें
def byte_to_utf8(data):
    return data.decode("utf-8")
print(byte_to_utf8(data=b'r\xc3\xa9sum\xc3\xa9'))

# एक पायथन फ़ंक्शन लिखें जो उपयोगकर्ता इनपुट के रूप में लंबाई, चौड़ाई लेता है और आयत का क्षेत्र देता है
def rectangle_area(length, breadth):
    area = length * breadth    
    return area

# एक पायथन फ़ंक्शन लिखें जो उपयोगकर्ता इनपुट और प्रिंट वर्ग और संख्या के घन के रूप में एक संख्या लेता है
def square_cube(number):
    print(number ** 2)  
    print(number ** 3)  
    
# एक पायथन प्रोग्राम लिखें जो उपयोगकर्ता इनपुट के रूप में सेंटीमीटर में ऊंचाई लेता है और पैरों और इंच में ऊंचाई लौटाता है
cm=int(input("Enter the height in centimeters:"))
inches=0.394*cm
feet=0.0328*cm
print("The length in inches",round(inches,2))
print("The length in feet",round(feet,2))

# सूची से डुप्लीकेट हटाने और परिणाम प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
l = [1,2,3,4,5,5,5,5,5,5,5,7,8,8,0]
result = set(l)
print("Result : ",result)

# एक पायथन फ़ंक्शन लिखें जो त्रिभुज के क्षेत्र की गणना करने और वापस करने के लिए उपयोगकर्ता इनपुट के रूप में पक्षों की लंबाई लेता है

def triangle_area(a,b,c):
    s = (a+b+c)/2
    area = (s(s-a)*(s-b)*(s-c)) ** 0.5
    return(area)

# दो नंबर स्वैप करने के लिए एक पायथन प्रोग्राम लिखें
num1 = 130
num2 = 34
num1,num2 = num2,num1
 
# साधारण ब्याज को प्रिंट करने के लिए उपयोगकर्ता से मूल राशि, ब्याज की दर और समय प्राप्त करने के लिए एक पायथन प्रोग्राम लिखें
principal = float(input("Enter principal : "))
rate= float(input("Enter rate : "))
time = float(input("Enter time : "))
simple_interest = print(f"Simple Interest : {(principal*rate*time/100)}")

# किसी संख्या को उल्टा करने के लिए जबकि लूप का उपयोग करके एक अजगर प्रोग्राम लिखें और उलटी संख्या को प्रिंट करें
Number = int(input("Please Enter any Number: "))    
Reverse = 0    
while(Number > 0):    
    Reminder = Number %10    
    Reverse = (Reverse *10) + Reminder    
    Number = Number //10    
     
print("\n Reverse of entered number is = %d" %Reverse)  

# इनपुट के रूप में वर्ष लेने के लिए एक पायथन प्रोग्राम लिखें और जांचें कि यह एक लीप वर्ष है या नहीं

year = int(input("Enter a year: "))  
if (year % 4) == 0:  
   if (year % 100) == 0:  
       if (year % 400) == 0:  
           print(f"{year} is a leap year")  
       else:  
           print(f"{year} is not a leap year")  
   else:  
       print(f"{year} is a leap year")  
else:  
   print(f"{year} is not a leap year")
   
# परीक्षण करने के लिए एक संख्या इनपुट करने के लिए एक पायथन प्रोग्राम लिखें और यदि यह एक अभाज्य संख्या है तो प्रिंट करें

num = int(input("Enter number :"))
lim = int(num/2) + 1
for i in range(2,lim):
    rem = num % i
    if rem == 0 :
        print(num,"is not a prime number")
        break
else:
    print(num,"is a prime number")
    
# उपयोगकर्ता से स्ट्रिंग इनपुट करने के लिए एक पायथन प्रोग्राम लिखें और इनपुट स्ट्रिंग को सभी अपर केस में कनवर्ट करें और परिणाम प्रिंट करें
string = input("Please Enter your Own String : ")

string1 = string.upper()
 
print("\nOriginal String in Lowercase  =  ", string)
print("The Given String in Uppercase =  ", string1)

# उपयोगकर्ता से एक स्ट्रिंग इनपुट करने के लिए एक पायथन प्रोग्राम लिखें और एक स्ट्रिंग में स्वरों की गिनती करें और आउटपुट प्रिंट करें

str1 = input("Please Enter Your Own String : ")
vowels = 0
 
for i in str1:
    if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'A'
       or i == 'E' or i == 'I' or i == 'O' or i == 'U'):
        vowels = vowels + 1
 
print("Total Number of Vowels in this String = ", vowels)

# उपयोगकर्ता से संख्या एन इनपुट करने के लिए एक पायथन प्रोग्राम लिखें और विषम संख्या को 1 से N तक प्रिंट करें

maximum = int(input(" Please Enter any Maximum Value : "))

for number in range(1, maximum + 1):
    if(number % 2 != 0):
        print("{0}".format(number))
        
# उपयोगकर्ता से संख्या एन इनपुट करने के लिए एक पायथन प्रोग्राम लिखें और 1 से N तक भी संख्याएं प्रिंट करें

maximum = int(input(" Please Enter the Maximum Value : "))

for number in range(1, maximum+1):
    if(number % 2 == 0):
        print("{0}".format(number))
        
# उपयोगकर्ता से दो नंबर इनपुट करने के लिए एक पायथन प्रोग्राम लिखें और दो नंबर जोड़ें और परिणाम प्रिंट करें

number1 = input(" Please Enter the First Number: ")
number2 = input(" Please Enter the second number: ")

sum = float(number1) + float(number2)
print('The sum of {0} and {1} is {2}'.format(number1, number2, sum))

# एक अजगर प्रोग्राम लिखें जो इनपुट के रूप में दो पूर्णांक लेता है और जांचें कि क्या पहला नंबर दूसरे से विभाज्य है

num1 = int(input("Enter first number :"))
num2 = int(input("Enter second number :"))
remainder  = num1 % num2
if remainder == 0:
    print(num1 ," is divisible by ",num2)
else :
    print(num1 ," is not divisible by ",num2)
    
# इनपुट पूर्णांक की तालिका को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

num = int(input("Please enter a number "))
for a in range(1,11):
    print(num , 'x' , a , '=' ,num*a)
    
# संख्या के भाज्य को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
num = int(input("Please enter a number "))
fact = 1
a = 1
while a <= num :
    fact *= a
    a += 1
print("The factorial of ",num, " is ",fact)

# एक पायथन प्रोग्राम लिखें जो इनपुट के रूप में 3 नंबर लेता है और एलिफ स्टेटमेंट का उपयोग करके तीन नंबरों में से सबसे बड़ा प्रिंट करता है

a = float(input("Please Enter the First value: "))
b = float(input("Please Enter the First value: "))
c = float(input("Please Enter the First value: "))

if (a > b and a > c):
          print("{0} is Greater Than both {1} and {2}". format(a, b, c))
elif (b > a and b > c):
          print("{0} is Greater Than both {1} and {2}". format(b, a, c))
elif (c > a and c > b):
          print("{0} is Greater Than both {1} and {2}". format(c, a, b))
else:
          print("Either any two values or all the three values are equal")
          
# एक पायथन प्रोग्राम लिखें जो इनपुट संख्या एन लेता है और फिबोनैकी श्रृंखला के पहले एन तत्वों को प्रिंट करता है

N = int(input("Please enter a number "))
first = 0
second = 1
print(first)
print(second)
for a in range(1,N-1):
    third = first + second
    print(third)
    first,second = second , third
    
# एक पूर्णांक के विभाजक को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
num = int(input("Please enter a integer "))
mid = int(num / 2)
print("The divisiors of ",num," are :" )
for a in range(2,mid + 1):
    if num % a == 0:
        print(a, end = ' ')
else :
    print()
    print("-End-")
    
# उपयोगकर्ता द्वारा इनपुट के रूप में प्रदान की गई संख्याओं की सूची का औसत खोजने के लिए एक पायथन प्रोग्राम लिखें
n=int(input("Enter the number of elements to be inserted: "))
a=[]
for i in range(0,n):
    elem=int(input("Enter element: "))
    a.append(elem)
avg=sum(a)/n
print("Average of elements in the list",round(avg,2))

# एक अजगर प्रोग्राम लिखें जो एक पूर्णांक N को इनपुट के रूप में लेता है और विषम संख्याओं को N तक जोड़ता है और परिणाम को प्रिंट करता है

N = int(input("Enter Number : "))
sum = 0
i = 1
while i <= N:
    sum = sum + i
    i = i + 2
print(sum)

# एक पायथन फ़ंक्शन लिखें जो एक स्ट्रिंग इनपुट लेता है और रिटर्न करता है कि पैलिंड्रोम है या नहीं

def isPalindrome(s):
    return s == s[::-1]
 
# एक पायथन प्रोग्राम लिखें जो सूची को एक इनपुट के रूप में लेता है और संख्याओं की दी गई सूची के माध्य की गणना करता है
lst = eval(input("Enter list : "))
mean = 0
sum = 0
for i in lst:
    sum  = sum + i
mean = sum / len(lst)
print(" The mean of given list is :", mean)

# एक पायथन प्रोग्राम लिखें जो इनपुट के रूप में सूची लेता है और संख्याओं की दी गई सूची के योग की गणना करता है
lst = eval(input("Enter list : "))
mean = 0
sum = 0
for i in lst:
    sum  = sum + i
print(" The mean of given list is :", sum)

# एक पायथन प्रोग्राम लिखें जो इनपुट के रूप में सूची लेता है और सूची में सभी तत्वों की आवृत्ति पाता है
lst = eval(input("Enter list : "))
mean = 0
sum = 0
for i in lst:
    sum  = sum + i
print(" The mean of given list is :", sum)

# एक पायथन फ़ंक्शन लिखें जो दो सूचियों को इनपुट के रूप में दो सूचियों में सामान्य तत्वों को प्रिंट आउट करता है

def common_member(a, b): 
    a_set = set(a) 
    b_set = set(b) 
  
    if (a_set & b_set): 
        print(a_set & b_set) 
    else: 
        print("No common elements")  
        
# एक अजगर फ़ंक्शन लिखें जो दो सूचियाँ लेता है और पहली सूची के बाद दूसरी सूची जोड़ता है
lst1 = eval(input("Enter list : "))
lst2 = eval(input("Enter list : "))
print(lst1 + lst2)


# 0 से 100 तक की संख्याओं के वर्गमूल की गणना और प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
i = 0
while i<= 100:
 print(i, "\t\t" , i**0.5)
 i = i + 1

# एक अजगर प्रोग्राम लिखें उपयोगकर्ता को "हैलो" के साथ बधाई देता है, उपयोगकर्ता द्वारा अपना नाम दर्ज करने के बाद:
name = input ("Input your name: ")
print("HELLO ", name)

# एक पायथन प्रोग्राम लिखें जो एक स्ट्रिंग इनपुट लेता है और रिवर्स स्ट्रिंग प्रिंट करता है
name = input("Enter String")
print(name[::-1]) 

# एक पायथन प्रोग्राम लिखें जो इनपुट को एक सूची लेता है और रिवर्स आउटपुट प्रिंट करता है
lst = eval(input("Enter list"))
print(lst[::-1]) 

# एक पायथन फ़ंक्शन लिखें जो वाक्य को इनपुट के रूप में लेता है और एक वाक्य से स्वरों को हटा देता है

sentence = input("Enter a sentence : ")

def fn(sentence):
    vowels = 'aeiou'
    return ''.join([ l for l in sentence if l not in vowels])

# एक पायथन फ़ंक्शन लिखें जो इनपुट के रूप में समान लंबाई की दो सूची लेता है और एक शब्दकोश को कुंजी के रूप में और अन्य को मान के रूप में वापस करता है।

keys = eval(input("Enter key list : "))
values = eval(input("Enter value list : "))
def fn(keys, values):
    return { keys[i] : values[i] for i in range(len(keys)) }

# एक पायथन फ़ंक्शन लिखें जो एक पूर्णांक को इनपुट के रूप में लेता है और उस संख्या का भाज्य लौटाता है

def factorial(n): 
      
    # single line to find factorial 
    return 1 if (n==1 or n==0) else n * factorial(n - 1); 

# एक अजगर फ़ंक्शन लिखें जो इनपुट त्रिज्या और सर्कल का रिटर्न क्षेत्र लेता है
def findArea(r): 
    PI = 3.142
    return PI * (r*r);

# एक पायथन फ़ंक्शन लिखें जो इनपुट सिद्धांत, दर, समय लेता है और चक्रवृद्धि ब्याज की गणना करता है

def compound_interest(principle, rate, time):
    # Calculates compound interest  
    Amount = principle * (pow((1 + rate / 100), time)) 
    CI = Amount - principle 
    print("Compound interest is", CI) 
    
# इनपुट वर्ण के एएससीआई मूल्य को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

character = input(" Enter Character :")
print(f"Ascii value of character {character} is : " , ord(character))

# एक पायथन प्रोग्राम लिखें जो एक पूर्णांक इनपुट लेता है और सूची समझ का उपयोग करके पहले एन प्राकृतिक संख्याओं के क्यूब्स के साथ श्रृंखला का योग ढूंढता है जो टा
N = int(input("Enter Integer "))
lst = [i**3 for i in range(1, N + 1)]
print(sum(lst)) 

# एक पायथन फ़ंक्शन लिखें जो इनपुट के रूप में सूची लेता है और इसे टपल में परिवर्तित करता है
def convert(list): 
    return tuple(list)

# एक सूची प्राप्त करने के लिए एक पायथन प्रोग्राम लिखें, गैर-रिक्त टुपल्स की दी गई सूची से प्रत्येक टपल में अंतिम तत्व द्वारा बढ़ते क्रम में क्रमबद्ध करें

def last(n): return n[-1]

def sort_list_last(tuples):
  return sorted(tuples, key=last)

print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))

# दो शब्दकोशों को जोड़ने के लिए एक पायथन प्रोग्राम लिखें

d1 = {'a' : 1 ,'b' : 2}
d2 = {'c' : 1 ,'d' : 2}
d3 = {**d1,**d2}
print(d3)

# एक सेट की लंबाई प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें

# एक सेट बनाएँ
seta = set([5, 10, 3, 15, 2, 20])
#Find the length use len()
print(len(seta))

# एक अजगर प्रोग्राम लिखें जो इनपुट के रूप में दो सेट लेता है और सामान्य तत्वों को प्रिंट करता है
s1 = eval(input("Enter set 1 "))
s2 = eval(input("Enter set 2 "))
print(s1.intersection(s2))

# एक पायथन प्रोग्राम लिखें जो एक सूची इनपुट लेता है और सूची के भीतर तत्वों का मतलब प्रिंट करता है
s1 = eval(input("Enter list "))
mean = sum(s1) / len(s1) 
print("Mean of sample is : " + str(mean)) 


# एक पायथन प्रोग्राम लिखें जो एक सूची इनपुट लेता है और सूची के भीतर तत्वों के मानक विचलन को प्रिंट करता है
mean = sum(s1) / len(s1) 
variance = sum([((x - mean) ** 2) for x in s1]) / len(s1) 
res = variance ** 0.5
print("Standard deviation of sample is : " + str(res)) 

# एक अजगर प्रोग्राम लिखें जो एक यादृच्छिक संख्या प्रिंट करता है
import random
n = random.random()
print(n) 

# एक पायथन फ़ंक्शन लिखें जो इनपुट को एक स्ट्रिंग लेता है और उसी से डुप्लिकेट को हटा देता है
foo = input("Enter String : ")
print("Duplicates Removed","".join(set(foo)))

# दिए गए स्ट्रिंग के अंत में 'आईएनजी' जोड़ने के लिए एक पायथन प्रोग्राम लिखें (लंबाई कम से कम 3 होनी चाहिए)। यदि दी गई स्ट्रिंग पहले से ही 'ing' से समाप्त होती है तो इसके बजाय 'ly' जोड़ें। यदि दिए गए तार की लंबाई 3 से कम है, तो इसे अपरिवर्तित छोड़ दें
def add_string(str1):
  length = len(str1)

  if length > 2:
    if str1[-3:] == 'ing':
      str1 += 'ly'
    else:
      str1 += 'ing'

  return str1

# दिए गए स्ट्रिंग से सबस्ट्रिंग 'नहीं' और 'खराब' की पहली उपस्थिति खोजने के लिए एक पायथन प्रोग्राम लिखें, यदि 'नहीं' 'खराब' का अनुसरण करता है, तो पूरे 'नहीं' ... 'खराब' सबस्ट्रिंग को 'अच्छा' से बदलें '। परिणामी स्ट्रिंग वापस करें
def not_poor(str1):
  snot = str1.find('not')
  spoor = str1.find('poor')
  

  if spoor > snot and snot>0 and spoor>0:
    str1 = str1.replace(str1[snot:(spoor+4)], 'good')
    return str1
  else:
    return str1

# दिए गए वाक्य में प्रत्येक शब्द की उपस्थिति की गणना करने के लिए एक पायथन प्रोग्राम लिखें।
def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts


# शब्दों के चारों ओर टैग के साथ HTML स्ट्रिंग बनाने के लिए एक पायथन फ़ंक्शन लिखें
def add_tags(tag, word):
	return "<%s>%s</%s>" % (tag, word, tag)

# संख्याओं की एक श्रृंखला से सम और विषम संख्याओं की संख्या गिनने के लिए एक पायथन प्रोग्राम लिखें

numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple
count_odd = 0
count_even = 0
for x in numbers:
        if not x % 2:
    	     count_even+=1
        else:
    	     count_odd+=1
             
# एक पायथन प्रोग्राम लिखें जो प्रत्येक आइटम और उसके संबंधित प्रकार को निम्न सूची से प्रिंट करता है

datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12],
{"class":'V', "section":'A'}]
for item in datalist:
   print ("Type of ",item, " is ", type(item))


# एक डिक्शनरी को वैल्यू के अनुसार सॉर्ट (आरोही) करने के लिए एक पायथन प्रोग्राम लिखें
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}

print({k :v for k,v in sorted(d.items(),key = lambda x : x[1])})

# डिक्शनरी को वैल्यू के हिसाब से सॉर्ट (अवरोही) करने के लिए पाइथन प्रोग्राम लिखें
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}

print({k :v for k,v in sorted(d.items(),key = lambda x : x[1],reverse = True)})

# सूची को क्रमबद्ध करने के लिए एक पायथन प्रोग्राम लिखें
numbers = [1, 3, 4, 2] 
numbers.sort()  
print(numbers) 

# दूसरे आइटम द्वारा टुपल्स की सूची को सॉर्ट करने के लिए एक पायथन प्रोग्राम लिखें
def Sort_Tuple(tup):  

    return(sorted(tup, key = lambda x: x[1]))   
  
tup = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]  

print(Sort_Tuple(tup)) 

# एक पायथन प्रोग्राम लिखें जो उपयोगकर्ता से दो इनपुट लेता है और जांचें कि वे बराबर हैं या नहीं
print("Enter first number")
first = input()
print("Enter second number")
second = input()
print(first == second)

# एक पायथन प्रोग्राम लिखें जो एक सूची इनपुट लेता है और सूची समझ का उपयोग करके प्रत्येक शब्द को वर्ग करता है
s1 = eval(input("Enter list "))
print([i**2 for i in s1])

# एक पायथन प्रोग्राम लिखें जो इनपुट सूची लेता है और सूची समझ का उपयोग करके प्रत्येक शब्द को घन करता है

s1 = eval(input("Enter list "))
print([i**3 for i in s1])

# एक पायथन प्रोग्राम लिखें जो सूची समझ का उपयोग करके हर शब्द में एक सूची और वर्गमूल इनपुट करता है

s1 = eval(input("Enter list "))
print([i**0.5 for i in s1])

# एक पायथन फ़ंक्शन लिखें जो इनपुट को स्ट्रिंग की सूची लेता है और सबसे बड़ी स्ट्रिंग प्रिंट करता है
def find_longest_word(words_list):
    word_len = []
    for n in words_list:
        word_len.append((len(n), n))
    word_len.sort()
    return word_len[-1][0], word_len[-1][1]

# एक पायथन प्रोग्राम लिखें जो एक स्ट्रिंग इनपुट लेता है और शब्दों की गिनती प्रिंट करता है

s1 = input("Enter string ")
print("Count of words",len(s1.split()))

# एक पायथन फ़ंक्शन लिखें जो इनपुट के रूप में टुपल्स की सूची लेता है और उन्हें वर्णानुक्रम में क्रमबद्ध करता है
def SortTuple(tup): 
      
    n = len(tup) 
      
    for i in range(n): 
        for j in range(n-i-1): 
              
            if tup[j][0] > tup[j + 1][0]: 
                tup[j], tup[j + 1] = tup[j + 1], tup[j] 
                  
    return tup 

# एक अजगर प्रोग्राम लिखें जो एक सूची लेता है और सूची के पहले और अंतिम मूल्य को स्वैप करता है
a=[]
n= int(input("Enter the number of elements in list:"))
for x in range(0,n):
    element=int(input("Enter element" + str(x+1) + ":"))
    a.append(element)
temp=a[0]
a[0]=a[n-1]
a[n-1]=temp
print("New list is:")
print(a)

# एक अजगर प्रोग्राम लिखें जो आज की तारीख को प्रिंट करे
from datetime import date
print(date.today()) 

# एक पायथन प्रोग्राम लिखें जो लाइनों की इनपुट संख्या लेता है और चौराहे की संभावित संख्या पाता है
def countMaxIntersect(n): 
    return int(n*(n - 1)/2) 

# एक नंबर एन इनपुट करने के लिए एक पायथन प्रोग्राम लिखें और वांछित आकार के एक उल्टे स्टार पैटर्न को प्रिंट करें
n=int(input("Enter number of rows: "))
for i in range (n,0,-1):
    print((n-i) * ' ' + i * '*')
    
# एक नंबर इनपुट करने के लिए एक पायथन प्रोग्राम लिखें और जांचें कि क्या दी गई संख्या पैलिंड्रोम है

n=int(input("Enter number:"))
temp=n
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
if(temp==rev):
    print("The number is a palindrome!")
else:
    print("The number isn't a palindrome!")
    
# एक संख्या इनपुट करने के लिए एक पायथन प्रोग्राम लिखें और एक पूर्णांक का सबसे छोटा विभाजक खोजें
 
n=int(input("Enter an integer:"))
a=[]
for i in range(2,n+1):
    if(n%i==0):
        a.append(i)
a.sort()
print("Smallest divisor is:",a[0])

# तीन अलग-अलग अंकों को स्वीकार करने के लिए एक पायथन प्रोग्राम लिखें और अंकों से सभी संभावित संयोजनों को प्रिंट करें

a=int(input("Enter first number:"))
b=int(input("Enter second number:"))
c=int(input("Enter third number:"))
d=[]
d.append(a)
d.append(b)
d.append(c)
for i in range(0,3):
    for j in range(0,3):
        for k in range(0,3):
            if(i!=j&j!=k&k!=i):
                print(d[i],d[j],d[k])

# क्रमबद्ध पायथन सूची में तत्व डालने के लिए एक पायथन फ़ंक्शन लिखें

def insert(list, n): 
      
    for i in range(len(list)): 
        if list[i] > n: 
            index = i 
            break
      
 
    list = list[:i] + [n] + list[i:] 
    return list

# दो नंबर जोड़ने के लिए एक पायथन प्रोग्राम लिखें
num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')

# उपयोगकर्ता द्वारा प्रदान की गई दो संख्याओं को जोड़ने और योग वापस करने के लिए एक पायथन फ़ंक्शन लिखें
def add_two_numbers(num1, num2):
    sum = num1 + num2
    return sum

# तीन संख्याओं में से सबसे बड़ी संख्या को खोजने और प्रिंट करने के लिए एक प्रोग्राम लिखें
snum1 = 10
num2 = 12
num3 = 14 
if (num1 >= num2) and (num1 >= num3): 
   largest = num1
elif (num2 >= num1) and (num2 >= num3):   
    largest = num2
else:   largest = num3
print(f'largest:{largest}')

# उपयोगकर्ता द्वारा प्रदान की गई दो संख्याओं को घटाने और परिणाम वापस करने के लिए एक पायथन फ़ंक्शन लिखें
def sub_two_numbers(num1, num2):
    sub = num1 - num2
    return sub

# उपयोगकर्ता द्वारा प्रदान की गई दो संख्याओं को गुणा करने और परिणाम वापस करने के लिए एक पायथन फ़ंक्शन लिखें
def mul_two_numbers(num1, num2):
    mul = num1 * num2
    return mul

# एलिमेंट फॉर्म डिक्शनरी पॉप करने के लिए एक पायथन प्रोग्राम लिखें
squares = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
print(squares.pop(4))

# एक अजगर प्रोग्राम लिखें जो टपल की लंबाई को प्रिंट करता है
thistuple = ("apple", "banana", "cherry")
print(len(thistuple))

# संख्या प्राप्त करने के लिए एक प्रोग्राम लिखें = 1,3,11,42,12,4001
from collections import Iterable
highestnumber = -999
for i in numbers:
  if i > highestnumber:
    highestnumber = i
print(numbers.index(highestnumber))

# संख्या प्राप्त करने के लिए एक प्रोग्राम लिखें = 1,3,11,42,12,4001
highestnumber = -999
for i in numbers:
  if i > highestnumber:
    highestnumber = i
print(numbers.index(highestnumber))

# सूची पायथन में सभी तत्वों में 1 जोड़ें
lst = [1,2,3]
list(map(lambda x:x+1, lst))

# सूची पायथन के प्रत्येक तत्व में एक स्ट्रिंग जोड़ें
my_list = ['foo', 'fob', 'faz', 'funk']
string = 'bar'
list2 = list(map(lambda orig_string: orig_string + string, my_list))

# तीसरा आयाम मैट्रिक्स डेटासेट अजगर जोड़ें
x = [2D_matrix] # To convert from a 2-D to 3-D
# or 
x = [[[value1]]] # To convert from a 1-D to 3-D

# python add all values of another list
a = [1, 2, 3]
b = [4, 5, 6]
a += b

# सूची पायथन की शुरुआत में एक मान जोड़ें
var=7
array = [1,2,3,4,5,6]
array.insert(0,var)

# पायथन में एक अपरकेस वाक्य को लोअरकेस में प्रिंट करें
s = "Kilometer"
print(s.lower())

# एक शब्दकोश क्रमबद्ध करें
mydictionary : {1: 1, 7: 2, 4: 2, 3: 1, 8: 1}
sortedDictionary = sorted(mydictionary.keys())

# पायथन में दशमलव को केवल दो दशमलव तक सीमित करें
answer = str(round(answer, 2))

# डिक्शनरी पायथन में कितनी कुंजियाँ प्रिंट करें
a = {'foo':42, 'bar':69}
print(len(a))

# एक स्ट्रिंग पायथन में एक वर्ण का एक्सेस इंडेक्स
foo = 'Hello'
foo.find('lo')

# अजगर सूची के अंतिम तत्व को प्रिंट करता है
mylist = [0, 1, 2]
print(myList[-1]) 

# पायथन में एक खाली रेखा कैसे जोड़ें
print("")

# कैसे सरणी अजगर में पहली स्थिति में तत्व जोड़ने के लिए
x = [1,3,4]
a = 2
x.insert(1,a)

# पायथन में दशमलव के बाद अतिरिक्त शून्य कैसे जोड़ें I
format(2.0, '.6f')
'2.000000'

# पायथन में सूची संख्या कैसे जोड़ें
numbers = [1,2,3,4,5,1,4,5] 
Sum = sum(numbers) 

# समान लंबाई वाले अजगर की सूचियों में विभाजित सूची
[lst[i:i + n] for i in range(0, len(lst), n)]

# नेस्टेड लूप्स पायथन से कैसे बाहर निकलें
x_loop_must_break = False

for x in [1, 2, 3]:
    print(f"x is {x}")
    for y in [1, 2, 3]:
        print(f"y is {y}")
        if y == 2:
            x_loop_must_break = True
            break
    if x_loop_must_break: break

# सूची में पायथन में पहला अक्षर कैपिटलाइज़ करें
my_list = ['apple pie', 'orange jam']
my_list[0].capitalize()

# कैसे जांचें कि कोई सूची किसी अन्य सूची का सबसेट है या नहीं
if(all(x in test_list for x in sub_list)): 
    flag = True

# 09 अगस्त 2020 को ब्रेकेबल बफ़ेलो द्वारा स्ट्रिंग कैमलकेस पाइथॉनपीथॉन है या नहीं, यह जाँचने के लिए एक फंक्शन लिखें।
def is_camel_case(s):
    return s != s.lower() and s != s.upper() and "_" not in s

# कैसे जांचें कि स्ट्रिंग बाइट फॉर्मेट पाइथिन में है या नहीं
isinstance(string, bytes)

# पायथन में एनटीएच प्राइम कैसे जांचें
x=int(input())
n,c=1,0
while(c<x):
    n+=1
    for i in range(2,n+1):
        if(n%i==0):
            break
    if(i==n):
        c=c+1

# पायथन में फ़ारेनहाइट को सेल्सियस में कैसे बदलें
Celsius = (Fahrenheit - 32) * 5.0/9.0

# एक दशमलव संख्या का बाइनरी प्रिंट करें
a=6
print(bin(a))

# 06 नवंबर 2020 को TheRubberDucky द्वारा pythonpython में बेस 2 से बेस 10 में बदलने के लिए एक पायथन फंक्शन लिखें
def getBaseTen(binaryVal):
    count = 0

    binaryVal = binaryVal[::-1]

	for i in range(0, len(binaryVal)):
    	if(binaryVal[i] == "1"):
            count += 2**i
    
    return count

# बैश कमांड निष्पादित करने के लिए एक पायथन फ़ंक्शन लिखें
import subprocess
subprocess.call(["sudo", "apt", "update"])

# 0 और 22 के बीच एक यादृच्छिक संख्या उत्पन्न करने और प्रिंट करने के लिए एक फ़ंक्शन लिखें
import random
n = random.randint(0,22)
print(n)

# अजगर में एक सरणी से एक यादृच्छिक तत्व प्राप्त करने के लिए
import random
list_ = [1,2,3,4]
random.choice(list_)

# पायथन में वर्तमान दिन प्रिंट करें
from datetime import date
today = date.today()
print("Today's date:", today)

# उपलब्ध सीपीयू कोर की संख्या गिनने के लिए कार्यक्रम
import os
os.cpu_count()

# सरणी पायथन में सभी शून्य मानों से छुटकारा पाएं
mylist = [1, 2, 3, '', 4]
mylist = [i for i in mylist if i]

# पायथन में सबसे आम संख्या प्राप्त करें
from statistics import mode
mode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))

# पायथन का वर्तमान संस्करण प्रिंट करें
import sys
print(sys.version)

# नेस्टेड सूचियों को समतल करने के लिए एक पायथन फ़ंक्शन लिखें
from collections import Iterable
def flatten(lis):
    for item in lis:
        if isinstance(item, Iterable) and not isinstance(item, str):
            for x in flatten(item):
                yield x
        else:
            yield item

# एक स्ट्रिंग को एक्सएमएल में बदलने के लिए एक पायथन फ़ंक्शन लिखें
import xml.etree.ElementTree as ET

root = ET.fromstring(country_data_as_string)

# कैसे एक्सएमएल फ़ाइल तत्व पेड़ खोलने के लिए
import xml.etree.ElementTree as ET

tree = ET.parse('filename.xml') 
tree_root = tree.getroot() 

# स्ट्रिंग से अजगर पार्स डेटाटाइम
from datetime import datetime

datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')

# कैसे अजगर में एक पाठ फ़ाइल से एक विशिष्ट पंक्ति को पढ़ने के लिए
line = open("file.txt", "r").readlines()[7]

# पायथन में स्ट्रिंग से पूर्णांक कैसे निकालें
s = '12abcd405'
result = ''.join([i for i in s if not i.isdigit()])

# पायथन में nth फाइबोनैचि वापस करने के लिए एक फ़ंक्शन लिखें
def Fibonacci(n): 
    if n<0: 
        print("Incorrect input")
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

# कैसे लैम्ब्डा का उपयोग कर अजगर में एक सूची सॉर्ट करने के लिए
data = [("Apples", 5, "20"), ("Pears", 1, "5"), ("Oranges", 6, "10")]

data.sort(key=lambda x:x[0])

# पायथन में दो मैट्रिक्स घटाने के लिए एक फ़ंक्शन लिखें
matrix1 = [[0, 1, 2], 
           [3, 5, 5], 
           [6, 7, 8]]

matrix2 = [[1, 2, 3], 
           [4, 5, 6], 
           [7, 8, 9]]

def subtractTheMatrix(matrix1, matrix2):
    matrix1Rows = len(matrix1)
    matrix2Rows = len(matrix2)
    matrix1Col = len(matrix1[0])
    matrix2Col = len(matrix2[0])

    #base case
    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):
        return "ERROR: dimensions of the two arrays must be the same"

    matrix = []
    rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            rows.append(0)
        matrix.append(rows.copy())
        rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            matrix[i][j] = matrix1[i][j] - matrix2[i][j]
            
    return matrix

# समय-समय पर एक पायथन लिपि लिखें
from datetime import datetime
start = datetime.now()
do_something():...
print(datetime.now() - start)

# दो क्रमबद्ध सरणियों के प्रतिच्छेदन को खोजने के लिए एक पायथन फ़ंक्शन लिखें
def printIntersection(arr1, arr2, m, n): 
    i, j = 0, 0
    while i < m and j < n: 
        if arr1[i] < arr2[j]: 
            i += 1
        elif arr2[j] < arr1[i]: 
            j+= 1
        else: 
            print(arr2[j]) 
            j += 1
            i += 1

arr1 = [1, 2, 4, 5, 6] 
arr2 = [2, 3, 5, 7] 
m = len(arr1) 
n = len(arr2) 
printIntersection(arr1, arr2, m, n) 

# सरणी में नेताओं को प्रिंट करने के लिए पायथन फ़ंक्शन लिखें
def printLeaders(arr,size):
         
    for i in range(0, size):
        for j in range(i+1, size):
            if arr[i]<arr[j]:
                break
        if j == size-1:  
            print(arr[i])

arr=[16, 17, 4, 3, 5, 2] 
printLeaders(arr, len(arr))

# एन नंबर पायथन के एलसीएम को प्रिंट करने के लिए एक पायथन फ़ंक्शन लिखें
import math

def LCMofArray(a):
  lcm = a[0]
  for i in range(1,len(a)):
    lcm = lcm*a[i]//math.gcd(lcm, a[i])
  return lcm

arr1 = [1,2,3]
print("LCM of arr1 elements:", LCMofArray(arr1))

# दो मैट्रिसेस को गुणा करने और परिणाम को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]
Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]
result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]

for i in range(len(X)):
   for j in range(len(Y[0])):
       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]

for r in result:
   print(r)
   
# शब्दकोशों की सूची मर्ज करने के लिए एक पायथन प्रोग्राम लिखें
result = {}
for d in L:
    result.update(d)

# अजगर में मर्ज सॉर्ट एल्गोरिथ्म को प्रिंट करने के लिए एक अजगर funvtion लिखें
def mergeSort(myList):
    if len(myList) > 1:
        mid = len(myList) // 2
        left = myList[:mid]
        right = myList[mid:]

        # Recursive call on each half
        mergeSort(left)
        mergeSort(right)

        # Two iterators for traversing the two halves
        i = 0
        j = 0
        
        # Iterator for the main list
        k = 0
        
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
              # The value from the left half has been used
              myList[k] = left[i]
              # Move the iterator forward
              i += 1
            else:
                myList[k] = right[j]
                j += 1
            # Move to the next slot
            k += 1

        # For all the remaining values
        while i < len(left):
            myList[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            myList[k]=right[j]
            j += 1
            k += 1

myList = [54,26,93,17,77,31,44,55,20]
mergeSort(myList)

# संख्याओं की एक सरणी पर माध्यिका खोजने के लिए एक पायथन फ़ंक्शन लिखें
def median(arr):
  
  if len(arr) == 1:
    return arr[0]
    
  else:
    arr = sorted(arr)
    a = arr[0:round(len(arr)/2)]
    b = arr[len(a):len(arr)]
    if len(arr)%2 == 0:
      return (a[len(a)-1]+b[0])/2
    else:
      return a[len(a)-1]

# लगातार प्राकृतिक संख्याओं की सूची में लापता संख्या खोजने के लिए एक पायथन फ़ंक्शन लिखें
def getMissingNo(A): 
    n = len(A) 
    total = (n + 1)*(n + 2)/2
    sum_of_A = sum(A) 
    return total - sum_of_A 

# संख्याओं की सूची को सामान्य करने और परिणाम को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
a = [2,4,10,6,8,4]
amin, amax = min(a), max(a)
for i, val in enumerate(a):
    a[i] = (val-amin) / (amax-amin)
print(a)

# पायथन में दिए गए स्ट्रिंग के क्रमपरिवर्तन के लिए एक पायथन प्रोग्राम लिखें और परिणाम प्रिंट करें
from itertools import permutations 
import string 
s = "GEEK"
a = string.ascii_letters 
p = permutations(s) 

d = [] 
for i in list(p): 
    if (i not in d): 
        d.append(i) 
        print(''.join(i)) 

# कोई संख्या एक पूर्ण वर्ग है या नहीं यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def is_perfect_square(n):
    x = n // 2
    y = set([x])
    while x * x != n:
        x = (x + (n // x)) // 2
        if x in y: return False
        y.add(x)
    return True

# एक संख्या किसी दिए गए आधार की शक्ति है या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
import math

def isPower (n, base):
    if base == 1 and n != 1:
        return False
    if base == 1 and n == 1:
        return True
    if base == 0 and n != 1:
        return False
    power = int (math.log(n, base) + 0.5)
    return base ** power == n

# एक सरणी से तीन संख्याएँ खोजने के लिए एक पायथन फ़ंक्शन लिखें जैसे कि तीन संख्याओं का योग शून्य के बराबर हो
def three_Sum(num):
    if len(num)<3: return []
    num.sort()
    result=[]
    for i in range(len(num)-2):
        left=i+1
        right=len(num)-1
        if i!=0 and num[i]==num[i-1]:continue
        while left<right:
            if num[left]+num[right]==-num[i]:
                result.append([num[i],num[left],num[right]])
                left=left+1
                right=right-1
                while num[left]==num[left-1] and left<right:left=left+1
                while num[right]==num[right+1] and left<right: right=right-1
            elif num[left]+num[right]<-num[i]:
                left=left+1
            else:
                right=right-1
    return result

# एक सूची में एक संख्या खोजने के लिए एक पायथन फ़ंक्शन लिखें जो दो बार नहीं होता है
def single_number(arr):
    result = 0
    for i in arr:
        result ^= i
    return result

# एक सूची में एकल तत्व खोजने के लिए एक पायथन फ़ंक्शन लिखें जहां प्रत्येक तत्व एक को छोड़कर तीन बार प्रकट होता है
def single_number(arr):
    ones, twos = 0, 0
    for x in arr:
        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)
    assert twos == 0
    return ones

# एक सकारात्मक पूर्णांक के अंकों को बार-बार जोड़ने के लिए एक फ़ंक्शन प्रोग्राम लिखें जब तक कि परिणाम एक अंक न हो
def add_digits(num):
        return (num - 1) % 9 + 1 if num > 0 else 0
    
# एक पूर्णांक के अंकों को उलटने के लिए एक फंक्शन प्रोग्राम लिखें।
def reverse_integer(x):
        sign = -1 if x < 0 else 1
        x *= sign

        # Remove leading zero in the reversed integer
        while x:
            if x % 10 == 0:
                x /= 10
            else:
                break

        # string manipulation
        x = str(x)
        lst = list(x)  # list('234') returns ['2', '3', '4']
        lst.reverse()
        x = "".join(lst)
        x = int(x)
        return sign*x

# एक पूर्णांक के बिट्स को उलटने के लिए एक पायथन फ़ंक्शन लिखें (32 बिट्स अहस्ताक्षरित)
def reverse_Bits(n):
        result = 0
        for i in range(32):
            result <<= 1
            result |= n & 1
            n >>= 1
        return result
    
# संख्याओं के अनुक्रम की जांच करने के लिए एक पायथन फ़ंक्शन लिखें अंकगणितीय प्रगति है या नहीं
def is_arithmetic(l):
    delta = l[1] - l[0]
    for index in range(len(l) - 1):
        if not (l[index + 1] - l[index] == delta):
             return False
    return True

# पायथन चुनौतियाँ: संख्याओं के अनुक्रम की जाँच करना एक ज्यामितीय प्रगति है या नहीं
def is_geometric(li):
    if len(li) <= 1:
        return True
    # Calculate ratio
    ratio = li[1]/float(li[0])
    # Check the ratio of the remaining
    for i in range(1, len(li)):
        if li[i]/float(li[i-1]) != ratio: 
            return False
    return True 

# दो उलटी संख्याओं के योग की गणना करने के लिए एक पायथन फ़ंक्शन लिखें और योग को उलटे रूप में प्रदर्शित करें
def reverse_sum(n1, n2):
    return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])

# एक पायथन फ़ंक्शन लिखें जहां आप कोई सकारात्मक पूर्णांक n लेते हैं, यदि n सम है, तो n / 2 प्राप्त करने के लिए इसे 2 से विभाजित करें। यदि n विषम है, तो इसे 3 से गुणा करें और 3n + 1 प्राप्त करने के लिए 1 जोड़ें। इस प्रक्रिया को तब तक दोहराएं जब तक आप 1 पहुंचें
def collatz_sequence(x):
    num_seq = [x]
    if x < 1:
       return []
    while x > 1:
       if x % 2 == 0:
         x = x / 2
       else:
         x = 3 * x + 1
       num_seq.append(x)    
    return num_seq

# यह जांचने के लिए एक पायथन फ़ंक्शन लिखें कि क्या दिया गया स्ट्रिंग किसी अन्य दिए गए स्ट्रिंग का विपर्यय है
def is_anagram(str1, str2):
    list_str1 = list(str1)
    list_str1.sort()
    list_str2 = list(str2)
    list_str2.sort()

    return (list_str1 == list_str2)

# किसी सूची के अंत में सभी शून्यों को पुश करने के लिए एक पायथन फ़ंक्शन लिखें
def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return(x)

# सूची के अंत में पहली संख्या को पुश करने के लिए एक पायथन फ़ंक्शन लिखें
def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return(x)

# अंतिम शब्द की लंबाई ज्ञात करने के लिए एक पायथन फ़ंक्शन लिखें
def length_of_last_word(s):
        words = s.split()
        if len(words) == 0:
            return 0
        return len(words[-1])

# दो बाइनरी नंबरों को जोड़ने के लिए एक पायथन फंक्शन लिखें
def add_binary_nums(x,y):
        max_len = max(len(x), len(y))

        x = x.zfill(max_len)
        y = y.zfill(max_len)

        result = ''
        carry = 0

        for i in range(max_len-1, -1, -1):
            r = carry
            r += 1 if x[i] == '1' else 0
            r += 1 if y[i] == '1' else 0
            result = ('1' if r % 2 == 1 else '0') + result
            carry = 0 if r < 2 else 1       

        if carry !=0 : result = '1' + result

        return result.zfill(max_len)

# एक एकल संख्या ज्ञात करने के लिए एक पायथन फ़ंक्शन लिखें जो विषम संख्याएँ होती हैं और अन्य संख्याएँ सम संख्याएँ होती हैं
def odd_occurrence(arr):
 
    # Initialize result
    result = 0
     
    # Traverse the array
    for element in arr:
        # XOR
        result = result ^ element
 
    return result

# एक पायथन फ़ंक्शन लिखें जो एक स्ट्रिंग लेता है और इसे एन्कोड करता है कि प्रतीकों की मात्रा पूर्णांक और प्रतीक द्वारा दर्शायी जाएगी
For example, the string "AAAABBBCCDAAA" would be encoded as "4A3B2C1D3A"
def encode_string(str1):
    encoded = ""
    ctr = 1
    last_char = str1[0]

    for i in range(1, len(str1)):

        if last_char == str1[i]:
            ctr += 1
         
        else:
            encoded += str(ctr) + last_char
            ctr = 0
            last_char = str1[i]
            ctr += 1
    encoded += str(ctr) + last_char
    return encoded

# एक नया सरणी बनाने के लिए एक पायथन फ़ंक्शन लिखें जैसे कि नई सरणी के सूचकांक i पर प्रत्येक तत्व पूर्णांक के दिए गए सरणी के सभी नंबरों का उत्पाद है, एक को छोड़कर
def product(nums):
    new_nums = []

    for i in nums:
        nums_product = 1

        for j in nums:     
            if j != i:
                nums_product = nums_product * j
        new_nums.append(nums_product)

    return new_nums

# पहले दो सौ प्राकृतिक संख्याओं के वर्गों के योग और योग के वर्ग के बीच का अंतर ज्ञात करने के लिए एक पायथन फ़ंक्शन लिखें
r = range(1, 201)
a = sum(r)
print (a * a - sum(i*i for i in r))

# संख्या 2 के अंकों के योग की शक्ति 20 की गणना करने के लिए एक पायथन फ़ंक्शन लिखें
def digits_sum():
	n = 2**20
	ans = sum(int(c) for c in str(n))
	return str(ans)

# 500 से नीचे 3 या 5 के सभी गुणकों के योग की गणना करने के लिए एक पायथन प्रोग्राम लिखें
n = 0
for i in range(1,500):
     if not i % 5 or not i % 3:
         n = n + i
print(n)

# किसी भी आधार में एक पूर्णांक को एक स्ट्रिंग में परिवर्तित करने के लिए एक पायथन फ़ंक्शन लिखें
def to_string(n,base):
   conver_tString = "0123456789ABCDEF"
   if n < base:
      return conver_tString[n]
   else:
      return to_string(n//base,base) + conver_tString[n % base

# N-1 के ज्यामितीय योग की गणना करने के लिए एक पायथन फ़ंक्शन लिखें
def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)

# दो पूर्णांकों का महत्तम समापवर्तक (gcd) ज्ञात करने के लिए एक Python फलन लिखिए
def Recurgcd(a, b):
	low = min(a, b)
	high = max(a, b)

	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return Recurgcd(low, high%low)

# प्रिंट करने के लिए एक प्रोग्राम लिखें जो ऐसी सभी संख्याओं को खोजेगा जो 7 से विभाज्य हैं लेकिन 5 के गुणक नहीं हैं
between 2000 and 3200 (both included).  
l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

print ','.join(l)


# प्रिंट करने के लिए एक प्रोग्राम लिखें जो ऐसी सभी संख्याओं को खोजेगा जो 7 से विभाज्य हैं लेकिन 5 के गुणक नहीं हैं,
import math
a = float(input("Enter the first coefficient: "))
b = float(input("Enter the second coefficient: "))
c = float(input("Enter the third coefficient: "))
if (a!=0.0):
    d = (bb)-(4ac) 
    if (d==0.0):
        print("The roots are real and equal.") 
        r = -b/(2a)
        print("The roots are ", r,"and", r)
    elif(d>0.0):
        print("The roots are real and distinct.")
        r1 = (-b+(math.sqrt(d)))/(2a) 
        r2 = (-b-(math.sqrt(d)))/(2a)
        print("The root1 is: ", r1)
        print("The root2 is: ", r2)
    else:
        print("The roots are imaginary.")
        rp = -b/(2a) ip = math.sqrt(-d)/(2a)
        print("The root1 is: ", rp, "+ i",ip)
        print("The root2 is: ", rp, "- i",ip)
else:
    print("Not a quadratic equation."

# दिए गए बायटेरेरे को हेक्साडेसिमल स्ट्रिंग में बदलने के लिए एक पायथन प्रोग्राम लिखें
def bytearray_to_hexadecimal(list_val):
     result = ''.join('{:02x}'.format(x) for x in list_val)  
     return(result)
     

# किसी दिए गए स्ट्रिंग के समान पहले और अंतिम वर्णों वाले सबस्ट्रिंग की संख्या गिनने के लिए एक पायथन प्रोग्राम लिखें
def no_of_substring_with_equalEnds(str1): 
	result = 0; 
	n = len(str1); 
	for i in range(n): 
		for j in range(i, n): 
			if (str1[i] == str1[j]): 
				result = result + 1
	return result
 
# सिंगल ट्रैवर्सल में दिए गए स्ट्रिंग के सामने सभी जगहों को स्थानांतरित करने के लिए एक पायथन प्रोग्राम लिखें।
def moveSpaces(str1): 
    no_spaces = [char for char in str1 if char!=' ']   
    space= len(str1) - len(no_spaces)
    result = ' '*space    
    return result + ''.join(no_spaces)

# किसी दिए गए बाइनरी स्ट्रिंग में लगातार 0 की अधिकतम लंबाई खोजने के लिए एक पायथन प्रोग्राम लिखें
def max_consecutive_0(input_str): 
     return  max(map(len,input_str.split('1')))
str1 = '111000010000110'
print("Original string:" + str1)
print("Maximum length of consecutive 0’s:")

# एक पायथन प्रोग्राम लिखें जो प्रत्येक तत्व को उसकी गिनती के रूप में कई बार दोहराता है
from collections import Counter
c = Counter(p=4, q=2, r=0, s=-2)
print(list(c.elements()))

# सूची में दूसरी सबसे छोटी संख्या खोजने के लिए एक पायथन प्रोग्राम लिखें
def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1]
  
  
# किसी सूची में एक सबलिस्ट शामिल है या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def is_Sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False

	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1
				
				if n == len(s):
					sub_set = True

	return sub_set
 
 
# किसी सूची में लगातार पाँच संख्याओं के समूह उत्पन्न करने के लिए एक पायथन प्रोग्राम लिखे
l = [[5*i + j for j in range(1,6)] for i in range(5)]
print(l)

# उन सूचियों की सूची में सूची को मुद्रित करने के लिए एक पायथन प्रोग्राम लिखें जिनके तत्वों का योग उच्चतम है
print(max(num, key=sum))

# एक शब्दकोश की गहराई को प्रिंट करने के लिए एक पायथन फक्शन लिखें
def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0
dic = {'a':1, 'b': {'c': {'d': {}}}}
print(dict_depth(dic))

# किसी दिए गए सूची तत्वों के लगातार डुप्लिकेट को सबलिस्ट में पैक करने और आउटपुट प्रिंट करने के लिए एक पायथन फ़ंक्शन लिखें
from itertools import groupby
def pack_consecutive_duplicates(l_nums):
    return [list(group) for key, group in groupby(l_nums)]
n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]
print("Original list:") 
print(n_list)
print("\nAfter packing consecutive duplicates of the said list elements into sublists:")
print(pack_consecutive_duplicates(n_list)) 

# पूर्णांकों की दी गई सूची या वर्णों की दी गई सूची से संशोधित रन-लेंथ एन्कोडिंग को दर्शाने वाली सूची बनाने के लिए एक पायथन फ़ंक्शन लिखें और आउटपुट प्रिंट करें
from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]

n_list = [1,1,2,3,4,4,5, 1]
print("Original list:") 
print(n_list)
print("\nList reflecting the modified run-length encoding from the said list:")
print(modified_encode(n_list))

# शून्य के साथ एक बहुआयामी सूची (सूचियों की सूची) बनाने के लिए एक पायथन फ़ंक्शन लिखें और आउटपुट प्रिंट करें
nums = []

for i in range(3):

    nums.append([])

    for j in range(2):

        nums[i].append(0)
print("Multidimensional list:")
print(nums)

# कंसोल से एक वर्ग मैट्रिक्स को पढ़ने के लिए एक पायथन फ़ंक्शन लिखें और मैट्रिक्स प्राथमिक विकर्ण के योग को प्रिंट करें। उपयोगकर्ता से इनपुट के रूप में (प्रत्येक पंक्ति के लिए) एक स्थान के साथ अलग किए गए प्रत्येक स्तंभ के लिए वर्ग मैट्रिक्स के आकार और तत्वों को स्वीकार करें और आउटपुट प्रिंट करें

size = int(input("Input the size of the matrix: "))
matrix = [[0] * size for row in range(0, size)]
for x in range(0, size):

    line = list(map(int, input().split()))

    for y in range(0, size):
        matrix[x][y] = line[y]

matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))

# एक नेस्टेड सूची किसी अन्य नेस्टेड सूची का सबसेट है या नहीं यह जांचने के लिए एक पायथन फ़ंक्शन लिखें और आउटपुट प्रिंट करें
def checkSubset(input_list1, input_list2): 
    return all(map(input_list1.__contains__, input_list2)) 
      

list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] 
list2 = [[1, 3],[13,15,17]]   
print("Original list:")
print(list1)
print(list2)
print("\nIf the one of the said list is a subset of another.:")
print(checkSubset(list1, list2))

# किसी दिए गए स्ट्रिंग के वर्णों की पुनरावृत्ति संख्या के साथ सभी क्रमपरिवर्तन प्रिंट करने के लिए एक पायथन फ़ंक्शन लिखें और आउटपुट प्रिंट करें
from itertools import product
def all_repeat(str1, rno):
  chars = list(str1)
  results = []
  for c in product(chars, repeat = rno):
    results.append(c)
  return results
print(all_repeat('xyz', 3))

# किसी दिए गए स्ट्रिंग की अनुक्रमणिका खोजने के लिए एक पायथन फ़ंक्शन लिखें जिस पर एक दिया गया सबस्ट्रिंग शुरू होता है। यदि दिए गए स्ट्रिंग रिटर्न में सबस्ट्रिंग नहीं मिला है तो 'नहीं मिला' और आउटपुट प्रिंट करें
def find_Index(str1, pos):
    if len(pos) > len(str1):
        return 'Not found'

    for i in range(len(str1)):

        for j in range(len(pos)):

            if str1[i + j] == pos[j] and j == len(pos) - 1:
                return i
                
            elif str1[i + j] != pos[j]:
                break

    return 'Not found

# प्रथम n संख्याओं का सबसे छोटा गुणज ज्ञात करने के लिए एक Python प्रोग्राम लिखिए। कारकों को भी प्रदर्शित कीजिए
def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    print(factors)

    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
                
# किसी दिए गए स्ट्रिंग (डुप्लिकेट सहित) के सभी क्रमपरिवर्तनों को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_lis
    
# पायथन में '*' ऑपरेटर का उपयोग किए बिना दो पूर्णांकों को गुणा करने के लिए एक पायथन प्रोग्राम लिखें
def multiply(x, y):
    if y < 0:
        return -multiply(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply(x, y - 1)

# अक्षांश और देशांतर का उपयोग करके दो बिंदुओं के बीच की दूरी की गणना करने के लिए एक पायथन प्रोग्राम लिखें
from math import radians, sin, cos, acos

print("Input coordinates of two points:")
slat = radians(float(input("Starting latitude: ")))
slon = radians(float(input("Ending longitude: ")))
elat = radians(float(input("Starting latitude: ")))
elon = radians(float(input("Ending longitude: ")))

dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
print("The distance is %.2fkm." % dist)

# रोमन अंक को पूर्णांक में बदलने के लिए पायथन क्लास लिखें
class Solution:
    def roman_to_int(self, s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val

# एक पूर्णांक को रोमन अंक में बदलने के लिए एक पायथन क्लास लिखें
class Solution:
    def int_to_Roman(self, num):
        val = [
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
            ]
        syb = [
            "M", "CM", "D", "CD",
            "C", "XC", "L", "XL",
            "X", "IX", "V", "IV",
            "I"
            ]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num

# दो पायथन डिक्शनरी को मर्ज करने और मर्ज किए गए डिक्शनरी को प्रिंट करने के लिए एक प्रोग्राम लिखें
d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)


# स्ट्रिंग संघनन जैसे दो पूर्णांकों को जोड़ने के लिए एक पायथन फ़ंक्शन लिखें और समेकित संख्या को पूर्णांक के रूप में वापस करें
def concat_two_numbers(num1, num2):
    combined_num = str(num1) + str(num2)
    return int(combined_num)


# दिए गए इंटीग्रल नंबर n के साथ, एक डिक्शनरी जनरेट करने के लिए एक प्रोग्राम लिखें जिसमें (i, i*i*i) ऐसा हो जो 1 और n (दोनों शामिल) के बीच का इंटीग्रल नंबर हो। और फिर प्रोग्राम को डिक्शनरी प्रिंट करनी चाहिए
n = 8
d = dict()
for i in range(1,n+1):
    d[i] = i*i*i
print(d)

# एक प्रोग्राम लिखें जो कंसोल से अल्पविराम से अलग संख्याओं के अनुक्रम को स्वीकार करता है और एक सूची और एक टपल उत्पन्न करता है जिसमें प्रत्येक संख्या होती है
values=input()
l=values.split(",")
t=tuple(l)
print(l)
print(t)

# एक पायथन फ़ंक्शन लिखें जो संख्याओं का एक क्रम लेता है और यह निर्धारित करता है कि क्या सभी संख्याएँ एक दूसरे से भिन्न हैं
def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False

# दी गई राशि के विरुद्ध नोटों की संख्या (नोट्स का नमूना: 10, 20, 50, 100, 200 और 500) खोजने के लिए एक पायथन फ़ंक्शन लिखें।
def no_notes(a):
  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]
  x = 0
  for i in range(9):
    q = Q[i]
    x += int(a / q)
    a = int(a % q)
  if a > 0:
    x = -1
  return x


# किसी दिए गए धनात्मक संख्या के भाज्य के अंत में शून्य की संख्या ज्ञात करने के लिए एक पायथन फ़ंक्शन लिखें।
def factendzero(n):
  x = n // 5
  y = x 
  while x > 0:
    x /= 5
    y += int(x)
  return y


# किसी दिए गए धनात्मक संख्या के भाज्य के अंत में शून्य की संख्या ज्ञात करने के लिए एक पायथन फ़ंक्शन लिखें
def binary_search(l, num_find):
    '''
    This function is used to search any number.
    Whether the given number is present in the
    list or not. If the number is present in list
    the list it will return TRUE and FALSE otherwise.
    '''
    start = 0
    end = len(l) - 1
    mid = (start + end) // 2
    found = False
    position = -1
    while start <= end:
        if l[mid] == num_find:
            found = True
            position = mid
            break
        if num_find > l[mid]:
            start = mid + 1
            mid = (start + end) // 2
        else:
            end = mid - 1
            mid = (start + end) // 2
    return (found, position)


# आईपी ​​​​पते से अग्रणी शून्य को हटाने के लिए एक पायथन फ़ंक्शन लिखें
import re
regex = '\.[0]*'
def remove_leading_zeros(ip):
    modified_ip = re.sub(regex, '.', ip)
    return modified_ip


# किसी दिए गए पूर्णांक के बाइनरी मान को वापस करने के लिए एक पायथन फ़ंक्शन लिखें
def int_to_bin(a):
  return bin(a)


# किसी दिए गए पूर्णांक का ऑक्टल मान वापस करने के लिए एक पायथन फ़ंक्शन लिखें
def int_to_oct(a):
  return oct(a)


# किसी दिए गए पूर्णांक के हेक्साडेसिमल मान को वापस करने के लिए एक पायथन फ़ंक्शन लिखें
def int_to_hex(a):
  return hex(a)


# पूर्णांक में दिए गए इनपुट को टाइपकास्ट करने के लिए एक पायथन प्रोग्राम लिखें
num = int(input("Input a value: "))
print(num)


# फ्लोट करने के लिए दिए गए इनपुट को टाइपकास्ट करने के लिए एक पायथन प्रोग्राम लिखें
num = float(input("Input a value: "))
print(num)


# एक मूल्य के विरुद्ध कई चरों की जाँच/परीक्षण करने के लिए एक पायथन प्रोग्राम लिखें
a = 10
b = 20
c = 30
if 10 in {a, b, c}:
  print("True")
else:
  print("False")  


# एक पायथन वर्ग लिखें जो एक संख्या आरंभ करेगा, एक संख्या दर्ज करेगा और संख्या को प्रिंट करेगा
class Number:
	def __init__(self, num):
		self.num = num

	def inputNum(self):
		self.num = int(input("Enter an integer number: "))

	def printNum(self):
		print(self.num)


# जब सिद्धांत राशि, ब्याज दर और समय दिया गया हो, तो पायथन में साधारण ब्याज खोजने के लिए एक पायथन फ़ंक्शन लिखें
def simple_interest(p,r,t):
    si = (p*r*t)/100
    return si


# जब सिद्धांत राशि, ब्याज दर और समय दिया गया हो, तो पायथन में चक्रवृद्धि ब्याज का पता लगाने के लिए एक पायथन फ़ंक्शन लिखें
def compound_interest(p,r,t):
    ci = p * (pow((1 + r / 100), t)) 
    return ci


# कोई व्यक्ति अपनी उम्र के आधार पर मतदान के योग्य है या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def vote_eligibility(age):
	if age>=18:
	    status="Eligible"
	else:
	    status="Not Eligible"
	return status


# किसी व्यक्ति के दिए गए वजन और ऊंचाई के लिए बीएमआई खोजने के लिए एक पायथन फ़ंक्शन लिखें
def bmi_calculator(height, weight):
	bmi = weight/(height**2)
	return bmi

# दी गई संख्या पूर्ण संख्या है या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def perfect_number_checker(num):
    i = 2
    sum = 1
    while(i <= num//2 ) :
        if (num % i == 0) :
            sum += i
        i += 1
    if sum == num :
        return f'{num} is a perfect number'

    else :
        return f'{num} is not a perfect number'

# किसी दी गई सूची से अधिकतम ODD संख्या ज्ञात करने के लिए एक Python फंक्शन लिखें
def odd_max_checker(list1):
	maxnum = 0
	for num in list1:
	    if num%2 != 0:
	        if num > maxnum:
	            maxnum = num
	return maxnum


# किसी दी गई सूची से अधिकतम EVEN संख्या ज्ञात करने के लिए एक Python फ़ंक्शन लिखें
def even_max_checker(list1):
	maxnum = 0
	for num in list1:
	    if num%2 == 0:
	        if num > maxnum:
	            maxnum = num
	return maxnum


# द्विघात समीकरण की जड़ को प्रिंट करने के लिए एक पायथन फ़ंक्शन लिखें
def quadratic_root(A,B,C):
	import math
	d=((B**2)-4*A*C)

	if d>=0:
	    s=(-B+(d)**0.5)/(2*A)
	    p=(-B-(d)**0.5)/(2*A)
	    print(math.floor(s),math.floor(p))
	else:
	    print('The roots are imaginary')


# किसी दिए गए वर्ष के कैलेंडर को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
import calendar
year=2020
print(calendar.calendar(year))


# दी गई तारीख मान्य है या नहीं, यह प्रिंट करने के लिए एक पायथन फ़ंक्शन लिखें
def date_validator(d,m,y):
	import datetime 
	try:
		s=datetime.date(y,m,d)
		print("Date is valid.")
	except ValueError: 
		print("Date is invalid.")


# एन-वें नंबर को खोजने के लिए एक पायथन फ़ंक्शन लिखें जो वर्ग और घन दोनों है
def nth_sq_and_cube(N):
	R = N**6
	return R


# एक संख्या दूसरी संख्या की शक्ति है या नहीं यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def power_checker(a,b):
	import math
	s=math.log(a,b)
	p=round(s)
	if (b**p)==a:
	    return f'{a} is the power of {b}.'
	else:
	    return f'{a} is NOT the power of {b}.'

# सभी खोजशब्दों की सूची मुद्रित करने के लिए एक पायथन प्रोग्राम लिखें
import keyword
print("Python keywords are...")
print(keyword.kwlist)


# दो सरणियों के प्रतिच्छेदन को खोजने के लिए एक पायथन फ़ंक्शन लिखें
def array_intersection(A,B):
	inter=list(set(A)&set(B))
	return inter


# दो सरणियों के मिलन को खोजने के लिए एक पायथन फ़ंक्शन लिखें
def array_union(A,B):
	union=list(set(A)|set(B))
	return union


# एक पायथन प्रोग्राम लिखें जो डुप्लिकेट को हटाकर दोनों सेटों के सभी आइटमों के साथ एक नया सेट प्रिंट करता है

set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.union(set2))


# एक पायथन प्रोग्राम लिखें जो दो पायथन सेट को देखते हुए, पहले सेट को उन आइटम्स के साथ अपडेट करें जो केवल पहले सेट में मौजूद हैं और दूसरे सेट में नहीं

set1 = {10, 20, 30}
set2 = {20, 40, 50}
print(set1.difference_update(set2))


# एक पायथन प्रोग्राम लिखें जो A या B में सभी तत्वों का एक सेट प्रिंट करता है, लेकिन दोनों नहीं

set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))


# एक पायथन प्रोग्राम लिखें जो यह निर्धारित करता है कि निम्नलिखित दो सेटों में कोई तत्व समान है या नहीं। यदि हाँ, तो सामान्य तत्वों को प्रदर्शित करें

set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
if set1.isdisjoint(set2):
  print("Two sets have no items in common")
else:
  print("Two sets have items in common")
  print(set1.intersection(set2))

# हजारों विभाजक के रूप में अल्पविराम के साथ संख्या को प्रिंट करने के लिए एक पायथन फ़ंक्शन लिखें
def formattedNumber(n):
  return ("{:,}".format(n))


# किसी दिए गए स्ट्रिंग में अपरकेस और लोअरकेस अक्षरों की कुल संख्या ज्ञात करने के लिए एक पायथन प्रोग्राम लिखें
str1='TestStringInCamelCase'
no_of_ucase, no_of_lcase = 0,0
for c in str1:
    if c>='A' and c<='Z':
        no_of_ucase += 1
    if c>='a' and c<='z':
        no_of_lcase += 1

print(no_of_lcase)
print(no_of_ucase)


# दिए गए स्ट्रिंग में अक्षरों और अंकों की कुल संख्या ज्ञात करने के लिए एक पायथन प्रोग्राम लिखें
str1='TestStringwith123456789'
no_of_letters, no_of_digits = 0,0
for c in str1:
  no_of_letters += c.isalpha()
  no_of_digits += c.isnumeric()

print(no_of_letters)
print(no_of_digits)


# दिए गए पाठ में किसी शब्द की उपस्थिति की गणना करने के लिए एक पायथन फ़ंक्शन लिखें
def text_searcher(text, word):
    count = 0
    for w in text.split():
        if w == word:
            count = count + 1
    return count


# एक स्ट्रिंग में प्रत्येक शब्द के पहले अक्षर को कैपिटलाइज़ करने के लिए एक पायथन फ़ंक्शन लिखें
def capitalize(text):
  return text.title()


# किसी सूची से मिथ्या मानों को हटाने के लिए एक पाइथॉन फंक्शन लिखिए
def newlist(lst):
  return list(filter(None, lst))


# दिए गए पूर्णांक के सभी अंकों का योग ज्ञात करने के लिए एक पायथन फ़ंक्शन लिखें
def sum_of_digits(num):
  if num == 0:
    return 0
  else:
    return num % 10 + sum_of_digits(int(num / 10))


# सूची के सभी तत्व समान हैं या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def check_equal(a):
  return a[1:] == a[:-1]


# स्ट्रिंग को डेटाइम ऑब्जेक्ट में बदलने के लिए एक पायथन प्रोग्राम लिखें
from datetime import datetime
date_string = "Mar 26 2021  4:20PM"
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)


# एक पायथन फ़ंक्शन लिखें जो दिए गए पूर्णांक के अंकों को उलट कर प्राप्त पूर्णांक देता है
def reverse(n):
    s=str(n) 
    p=s[::-1]
    return p 


# एक पायथन प्रोग्राम लिखें जो सामान्य वस्तुओं को छोड़कर, सेट 2 से आइटम जोड़कर सेट 1 को अपडेट करता है
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.symmetric_difference_update(set2)
print(set1)


# एक पायथन प्रोग्राम लिखें जो सेट 1 से उन आइटम्स को हटा देता है जो सेट 1 और सेट 2 दोनों के लिए सामान्य नहीं हैं
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.intersection_update(set2)
print(set1)


# एक टपल को उलटने के लिए एक पायथन प्रोग्राम लिखें
aTuple = (10, 20, 30, 40, 50)
aTuple = aTuple[::-1]
print(aTuple)


# दो टुपल्स को स्वैप करने के लिए एक पायथन प्रोग्राम लिखें
tuple1 = (11, 22)
tuple2 = (99, 88)
tuple1, tuple2 = tuple2, tuple1
print(tuple2)
print(tuple1)


# निम्नलिखित टपल के अंदर सूची के दूसरे आइटम (33) को 333 में संशोधित करने के लिए एक पायथन प्रोग्राम लिखें
tuple1 = (11, [22, 33], 44, 55)
tuple1[1][1] = 333
print(tuple1)


# टुपल्स के टुपल्स को दूसरे आइटम द्वारा सॉर्ट करने के लिए एक पायथन प्रोग्राम लिखें
tuple1 = (('a', 23),('b', 37),('c', 11), ('d',29))
tuple1 = tuple(sorted(list(tuple1), key=lambda x: x[1]))
print(tuple1)


# निम्नलिखित टपल में सभी आइटम समान हैं या नहीं, यह जांचने के लिए एक पायथन फ़ंक्शन लिखें
def check_tuple_same(sampleTuple):
    return all(i == sampleTuple[0] for i in sampleTuple)


# मिलीसेकंड में वर्तमान समय को प्रिंट करने के लिए एक पायथन प्रोग्राम लिखें
import time
milliseconds = int(round(time.time() * 1000))
print(milliseconds)


# एक पायथन फ़ंक्शन func1 () लिखें, जैसे कि यह तर्क की एक चर लंबाई को स्वीकार कर सकता है और सभी तर्क मान प्रिंट कर सकता है
def func1(*args):
    for i in args:
        print(i)

# एक पायथन प्रोग्राम लिखें जिसमें दो पायथन सूची दी गई हो। दोनों सूचियों को एक साथ पुनरावृत्त करें जैसे कि सूची 1 को आइटम को मूल क्रम में और सूची 2 को उल्टे क्रम में प्रदर्शित करना चाहिए
list1 = [10, 20, 30, 40]
list2 = [100, 200, 300, 400]

for x, y in zip(list1, list2[::-1]):
    print(x, y)

# एक पायथन फ़ंक्शन लिखें जो एक स्ट्रिंग को देखते हुए, केवल उन वर्णों को प्रदर्शित करता है जो एक सम अनुक्रमणिका संख्या पर मौजूद हैं
def printEveIndexChar(str):
  for i in range(0, len(str)-1, 2):
    print("index[",i,"]", str[i] )


# एक पायथन फ़ंक्शन लिखें जिसमें एक स्ट्रिंग और एक पूर्णांक संख्या n दी गई हो, शून्य से n तक शुरू होने वाली स्ट्रिंग से वर्णों को हटा दें और एक नया स्ट्रिंग लौटाएं
def removeChars(str, n):
  return str[n:]


# एक पायथन फ़ंक्शन लिखें जो संख्याओं की एक सूची को देखते हुए, यदि किसी सूची की पहली और अंतिम संख्या समान है, तो True लौटाएं
def isFirst_And_Last_Same(numberList):
    firstElement = numberList[0]
    lastElement = numberList[-1]
    if (firstElement == lastElement):
        return True
    else:
        return False

# एक पायथन फ़ंक्शन लिखें जो संख्याओं की एक सूची दी गई है, इसे पुनरावृत्त करें और केवल उन संख्याओं को प्रिंट करें जो 5 से विभाज्य हैं
def findDivisible(numberList):
    for num in numberList:
        if (num % 5 == 0):
            print(num)


# एक पायथन फ़ंक्शन लिखें जो संख्याओं की दो सूची को देखते हुए एक नई सूची बनाता है जैसे कि नई सूची में पहली सूची से केवल विषम संख्याएँ और दूसरी सूची से संख्याएँ भी होनी चाहिए
def mergeList(list1, list2):
    thirdList = []
    for num in list1:
        if (num % 2 != 0):
            thirdList.append(num)
    for num in list2:
        if (num % 2 == 0):
            thirdList.append(num)
    return thirdList


# ए या बी में सभी तत्वों का एक सेट वापस करने के लिए एक पायथन प्रोग्राम लिखें, लेकिन दोनों नहीं
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))


# पायथन में दी गई तारीख से एक सप्ताह (7 दिन) घटाने के लिए एक पायथन प्रोग्राम लिखें
from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)


# किसी दिए गए दिनांक के सप्ताह का दिन खोजने के लिए एक पायथन प्रोग्राम लिखें
from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))


# निम्नलिखित डेटाटाइम उदाहरण को स्ट्रिंग प्रारूप में बदलने के लिए एक पायथन प्रोग्राम लिखें
from datetime import datetime
given_date = datetime(2020, 2, 25)
string_date = given_date.strftime("%Y-%m-%d %H:%M:%S")
print(string_date)


# दो समान लंबाई के सेट को डिक्शनरी में बदलने के लिए एक पायथन प्रोग्राम लिखें
keys = {'Ten', 'Twenty', 'Thirty'}
values = {10, 20, 30}
sampleDict = dict(zip(keys, values))
print(sampleDict)



# एक प्रोग्राम लिखें जो ऐसी सभी संख्याओं को खोजेगा जो 7 से विभाज्य हैं लेकिन 2000 और 3200 (दोनों शामिल) के बीच 5 के गुणक नहीं हैं

l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))


# एक प्रोग्राम लिखें जो ऑब्जेक्ट के प्रकार को निर्धारित करेगा

def typeIdentifier(object):
  return f'object type : {type(object)}'

# एक पायथन वर्ग लिखें जिसमें कम से कम दो विधियाँ हों: getString: कंसोल इनपुट से एक स्ट्रिंग प्राप्त करने के लिए PrintString: ऊपरी मामले में स्ट्रिंग को प्रिंट करने के लिए

class IOString(object):
    def __init__(self):
        self.s = ""

    def getString(self):
        self.s = input()
    
    def printString(self):
        print(self.s.upper())

strObj = IOString()
strObj.getString()
strObj.printString()


# एक प्रोग्राम लिखें जो पायथन प्रक्रिया द्वारा मेमोरी उपयोग का निर्धारण करेगा
import os, psutil
print(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)

# एक ऐसा फंक्शन लिखिए जो किसी कैरेक्टर का एससीआई मान प्रदान करे

def charToASCII(chr):
  return f'ASCII value of {chr} is: {ord(chr)}'
  
# एक स्ट्रिंग को उल्टा करने के लिए एक फंक्शन लिखें

def revStr(inp):
  inp = inp[::-1]
  return inp

# किसी भी संख्या द्वारा उपयोग किए जाने वाले बिट्स को निर्धारित करने के लिए एक फ़ंक्शन लिखें

def totalBits(n):
	return f'total number of bits used in {n} is : {len(bin(n)[2: ])}'


