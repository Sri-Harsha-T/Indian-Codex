# एक सूची को देखते हुए इसे 3 बराबर भागों में विभाजित करें और प्रत्येक सूची को वापस करें
sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]

length = len(sampleList)
chunkSize  = int(length/3)
start = 0
end = chunkSize
for i in range(1, 4, 1):
  indexes = slice(start, end, 1)
  listChunk = sampleList[indexes]
  mylist = [i for i in listChunk]
  print("After reversing it ", mylist)
  start = end
  if(i != 2):
    end +=chunkSize
  else:
    end += length - chunkSize

# एक इनपुट के घातांक की गणना करने के लिए एक प्रोग्राम लिखें
input = 9
exponent = 2
final = pow(input, exponent)
print(f'Exponent Value is:{final}')

# दो मैट्रिक्स को गुणा करने के लिए एक प्रोग्राम लिखें

X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]

result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]

for i in range(len(X)):
   for j in range(len(Y[0])):
       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]
print(f"Final Result is{result}")

# शेष दो संख्याओं को खोजने और प्रिंट करने के लिए एक प्रोग्राम लिखें

num1 = 12
num2 = 10

ratio = num1 % num2
print(f'remainder:{ratio}')

# पायथन में एक संख्या को उल्टा करें
number = 1367891
revs_number = 0  
while (number > 0):
  remainder = number % 10
  revs_number = (revs_number * 10) + remainder
  number = number // 10
print("The reverse number is : {}".format(revs_number))

# संख्या में अंकों के योग की गणना करने के लिए पायथन प्रोग्राम
def sumDigits(no):  
    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   
n = 1234511
print(sumDigits(n))

# एक यादृच्छिक संख्या सूची के मध्य तत्व का पता लगाएं
my_list = [4,3,2,9,10,44,1]
print("mid value is ",my_list[int(len(my_list)/2)])

# सूची को आरोही क्रम में क्रमबद्ध करें
my_list = [4,3,2,9,10,44,1]
my_list.sort()
print(f"Ascending Order list:,{my_list}")

# सूची को अवरोही क्रम में क्रमबद्ध करें
my_list = [4,3,2,9,10,44,1]
my_list.sort(reverse=True)
print(f"Descending Order list:,{my_list}")

# दो सूची का संयोजन
my_list1 = [4,3,2,9,10,44,1]
my_list2 = [5,6,2,8,15,14,12]
print(f"Sum of two list:,{my_list1+my_list2}")

# दिए गए इंडेक्स पर आइटम को सूची से हटाता है और हटाए गए आइटम को वापस करता है
my_list1 = [4,3,2,9,10,44,1,9,12]
index = 4
print(f"Sum of two list:,{my_list1.pop(index)}")

# सूची में तत्व जोड़ना
animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print('Updated animals list: ', animals)

# सूची में निर्दिष्ट तत्व के प्रकट होने की संख्या लौटाता है
vowels = ['a', 'e', 'i', 'o', 'i', 'u']
count = vowels.count('i')
print('The count of i is:', count)

# सूची के अंदर टपल तत्वों की गणना करें
random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
count = random.count(('a', 'b'))
print("The count of ('a', 'b') is:", count)

# सूची से सभी आइटम निकालता है
list = [{1, 2}, ('a'), ['1.1', '2.2']]
list.clear()
print('List:', list)

# एक स्ट्रिंग में पहले वर्णों तक पहुँचें
word = "Hello World"
letter=word[0]
print(f"First Charecter in String:{letter}")

# एक स्ट्रिंग में अंतिम वर्णों तक पहुँचें
word = "Hello World"
letter=word[-1]
print(f"First Charecter in String:{letter}")

# सूची समझ से एक सूची उत्पन्न करें
list = [x for x in range(10)]
print(f"List Generated by list comprehension:{list}")

# नई सूची में मानों को अपरकेस में सेट करें
list = "AMITKAYAL"
newlist = [x.upper() for x in list]
print(f"New list to upper case:{newlist}")

# स्ट्रिंग सूची को वर्णानुक्रम में क्रमबद्ध करें

thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort()
print(f"Sorted List:{thislist}")

# दो सेट में शामिल हों
set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}
set3 = set2.union(set1)
print(f"Joined Set:{set3}")

# केवल वही आइटम रखें जो दोनों सेट में मौजूद हों
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}

x.intersection_update(y)
print(f"Duplicate Value in Two set:{x}")

# सूची से सभी आइटम रखें लेकिन डुप्लीकेट नहीं
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}

x.symmetric_difference_update(y)
print(f"Duplicate Value in Two set:{x}")

# एक शब्दकोश बनाएं और प्रिंट करें
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(f"Sample Dictionary:{thisdict}")

# शब्दकोश की लंबाई की गणना करें
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

print(f"Length of Dictionary:{len(thisdict)}")

# एक स्ट्रिंग और एक संख्या का मूल्यांकन करें
print(bool("Hello"))
print(bool(15))

# एक स्ट्रिंग की लंबाई की गणना करें
word = "Hello World"
print(f"Length of string: {len(word)}")

# एक स्ट्रिंग में रिक्त स्थान की संख्या गिनें
s = "Count, the number of spaces"
lenx = s.count(' ')
print(f"number of spaces in sring: {lenx}")

# स्प्लिट स्ट्रिंग्स
word = "Hello World"
ksplit = word.split(' ') 
print(f"Splited Strings: {ksplit}")

# दस डॉट्स प्रिंट करता है
ten = "." * 10
print(f"Ten dots: {ten}")

# एक स्ट्रिंग को दूसरे स्ट्रिंग से बदलना
word = "Hello World"
replace = "Bye"
input = "Hello"
after_replace = word.replace(input, replace)
print(f"String ater replacement: {after_replace}")

# प्रमुख पात्रों को हटा देता है
word = " xyz "
lstrip = word.lstrip()
print(f"String ater removal of leading characters:{lstrip}")

# अनुगामी वर्णों को हटाता है
word = " xyz "
rstrip = word.rstrip()
print(f"String ater removal of trailing characters:{rstrip}")

# जांचें कि क्या सभी वर्ण अल्फ़ान्यूमेरिक हैं
word = "Hello World"
check = word.isalnum()
print(f"All char are alphanumeric?:{check}")

# जांचें कि स्ट्रिंग में सभी वर्ण वर्णानुक्रम में हैं या नहीं
word = "Hello World"
check = word.isalpha()
print(f"All char are alphabetic?:{check}")

# यदि स्ट्रिंग में अंक हैं तो परीक्षण करें
word = "Hello World"
check = word.isdigit()
print(f"String contains digits?:{check}")

# परीक्षण करें यदि स्ट्रिंग में अपरकेस है
word = "Hello World"
check = word.isupper()
print(f"String contains upper case?:{check}")

# परीक्षण करें यदि स्ट्रिंग H से शुरू होती है
word = "Hello World"
check = word.startswith('H')
print(f"String starts with H?:{check}")

# दिए गए वर्ण के लिए एक पूर्णांक मान लौटाता है
str = "A"
val = ord(str)
print(f"Integer value for the given character?:{val}")

# फाइबोनैचि श्रृंखला 100 तक
n = 100
result = []
a, b = 0 , 1
while b < n:
  result. append( b)
  a, b = b, a + b
final = result
print(f"Fibonacci series up to 100:{final}")

# एक स्ट्रिंग में कुल अंक गिनना
str1 = "abc4234AFde"
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.isdigit()):
    digitCount += 1
print('Number of digits: ',digitCount)

# एक स्ट्रिंग में कुल अल्फ़ान्यूमेरिक की गिनती
str1 = "abc4234AFde"
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.isalpha()):
    digitCount += 1
print('Number of alphanumeric: ',digitCount)

# एक स्ट्रिंग में कुल अपर केस की गिनती करना
str1 = "abc4234AFde"
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.upper()):
    digitCount += 1
print('Number total Upper Case: ',digitCount)

# एक स्ट्रिंग में कुल लोअर केस की गिनती करना
str1 = "abc4234AFdeaa"
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.lower()):
    digitCount += 1
print('Number total lower Case: ',digitCount)

# पायथन में बबल सॉर्ट
list1 = [1, 5, 3, 4]

for i in range(len(list1)-1):
  for j in range(i+1,len(list1)):
    if(list1[i] > list1[j]):
      temp = list1[i]
      list1[i] = list1[j]
      list1[j] = temp
print("Bubble Sorted list: ",list1)

# दो सूचियों से संख्याओं के प्रत्येक जोड़े के गुणनफल की गणना करें
list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [a*b for a in list1 for b in list2]
print(f"Product of every pair of numbers from two lists:{final}")

# दो सूचियों से संख्याओं के प्रत्येक जोड़े के योग की गणना करें
list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [a+b for a in list1 for b in list2]
print(f"sum of every pair of numbers from two lists:{final}")

# दो सूचियों के जोड़ीवार उत्पाद की गणना करें
list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [list1[i]*list2[i] for i in range(len(list1))]
print(f"pair-wise product of two lists:{final}")

# स्टैक से अंतिम तत्व निकालें
s = [1,2,3,4]
print(f"last element from the stack:{s.pop()}")

# कतार की शुरुआत में एक नंबर डालें
q = [1,2,3,4]
q.insert(0,5)
print(f"Revised List:{q}")

# दो वेक्टर का जोड़
v1 = [1,2,3]
v2 = [1,2,3]
s1 = [0,0,0]

for i in range(len(v1)):
  s1[i] = v1[i] + v2[i]
print(f"New Vector:{s1}")

# नकारात्मक कीमतों को 0 से बदलें और सूची में सकारात्मक मानों को अपरिवर्तित छोड़ दें
original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f"Final List:{prices}")

# शब्दकोश को JSON में कनवर्ट करें
import json
person_dict = {'name': 'Bob',
'age': 12,
'children': None
}
person_json = json.dumps(person_dict)
print(person_json)

# फ़ाइल में JSON लिखना
import json
person_dict = {"name": "Bob",
"languages": ["English", "Fench"],
"married": True,
"age": 32
}
with open('person.txt', 'w') as json_file:
  json.dump(person_dict, json_file)

# JSON कि सुंदर प्रिंट
import json
person_string = '{"name": "Bob", "languages": "English", "numbers": [2, 1.6, null]}'
person_dict = json.loads(person_string)
print(json.dumps(person_dict, indent = 4, sort_keys=True))

# जांचें कि JSON में कुंजी मौजूद है या नहीं
import json

studentJson ="""{
   "id": 1,
   "name": "john wick",
   "class": 8,
   "percentage": 75,
   "email": "jhon@pynative.com"
}"""

print("Checking if percentage key exists in JSON")
student = json.loads(studentJson)
if "percentage" in student:
    print("Key exist in JSON data")
    print(student["name"], "marks is: ", student["percentage"])
else:
    print("Key doesn't exist in JSON data")

# जांचें कि JSON में कुंजी के लिए कोई मान है या नहीं
import json

studentJson ="""{
   "id": 1,
   "name": "Ishwar Venugopal",
   "class": null,
   "percentage": 35,
   "email": "ishwarraja@gmail.com"
}"""
student = json.loads(studentJson)
if not (student.get('email') is None):
     print("value is present for given JSON key")
     print(student.get('email'))
else:
    print("value is not present for given JSON key")

# पायथन में JSON कुंजियों को क्रमबद्ध करें और इसे एक फ़ाइल में लिखें
import json
sampleJson = {"id" : 1, "name" : "value2", "age" : 29}

with open("sampleJson.json", "w") as write_file:
    json.dump(sampleJson, write_file, indent=4, sort_keys=True)
print("Done writing JSON data into a file")

# एक पायथन सूची दी गई। किसी सूची के प्रत्येक आइटम को उसके वर्ग में बदलें
aList = [1, 2, 3, 4, 5, 6, 7]
aList =  [x * x for x in aList]
print(aList)

# स्ट्रिंग्स की सूची से खाली स्ट्रिंग्स निकालें
list1 = ["Mike", "", "Emma", "Kelly", "", "Brad"]
resList = [i for i in (filter(None, list1))]
print(resList)

# एक प्रोग्राम लिखें जो दी गई पायथन सूची को प्राप्त करेगा, सूची से इनपुट की सभी घटनाओं को हटा दें
list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
   return [value for value in sampleList if value != val]
   
resList = removeValue(list1, 20)
print(resList)

# 100 और 999 के बीच 3 यादृच्छिक पूर्णांक उत्पन्न करें जो 5 से विभाज्य है
import random

print("Generating 3 random integer number between 100 and 999 divisible by 5")
for num in range(3):
    print(random.randrange(100, 999, 5), end=', ')

# किसी दिए गए स्ट्रिंग से यादृच्छिक वर्ण चुनें
import random

name = 'pynative'
char = random.choice(name)
print("random char is ", char)

# लंबाई 5 की यादृच्छिक स्ट्रिंग उत्पन्न करें
import random
import string

def randomString(stringLength):
    """Generate a random string of 5 charcters"""
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(stringLength))

print ("Random String is ", randomString(5) )

# दी गई प्रारंभ और समाप्ति तिथियों के बीच एक यादृच्छिक तिथि उत्पन्न करें
import random
import time

def getRandomDate(startDate, endDate ):
    print("Printing random date between", startDate, " and ", endDate)
    randomGenerator = random.random()
    dateFormat = '%m/%d/%Y'

    startTime = time.mktime(time.strptime(startDate, dateFormat))
    endTime = time.mktime(time.strptime(endDate, dateFormat))

    randomTime = startTime + randomGenerator * (endTime - startTime)
    randomDate = time.strftime(dateFormat, time.localtime(randomTime))
    return randomDate

print ("Random Date = ", getRandomDate("1/1/2016", "12/12/2018"))

# एक प्रोग्राम लिखें जो दो स्ट्रिंग्स, s1 और s2 दिए गए s1 के बीच में s2 जोड़कर एक नया स्ट्रिंग बनाएगा
def appendMiddle(s1, s2):
  middleIndex = int(len(s1) /2)
  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]
  print("After appending new string in middle", middleThree)
  
appendMiddle("Ault", "Kelly")

# स्ट्रिंग वर्णों को ऐसे व्यवस्थित करें कि छोटे अक्षर पहले आएं
str1 = "PyNaTive"
lower = []
upper = []
for char in str1:
    if char.islower():
        lower.append(char)
    else:
        upper.append(char)
sorted_string = ''.join(lower + upper)
print(sorted_string)

# एक स्ट्रिंग को देखते हुए, अन्य सभी वर्णों को अनदेखा करते हुए, स्ट्रिंग में दिखाई देने वाले अंकों का योग और औसत लौटाएं
import re

inputStr = "English = 78 Science = 83 Math = 68 History = 65"
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
  totalMarks+=mark

percentage = totalMarks/len(markList)  
print("Total Marks is:", totalMarks, "Percentage is ", percentage)

# एक इनपुट स्ट्रिंग को देखते हुए, एक स्ट्रिंग के भीतर सभी वर्णों की घटनाओं को गिनें
str1 = "Apple"
countDict = dict()
for char in str1:
  count = str1.count(char)
  countDict[char]=count
print(countDict)

# किसी दिए गए स्ट्रिंग को उल्टा करें
str1 = "PYnative"
print("Original String is:", str1)

str1 = str1[::-1]
print("Reversed String is:", str1)

# किसी दिए गए स्ट्रिंग से विशेष प्रतीक/विराम चिह्न हटाएं
import string

str1 = "/*Jon is @developer & musician"
new_str = str1.translate(str.maketrans('', '', string.punctuation))
print("New string is ", new_str)

# स्ट्रिंग से पूर्णांकों के अलावा अन्य सभी वर्णों को हटा दें
str1 = 'I am 25 years and 10 months old'
res = "".join([item for item in str1 if item.isdigit()])
print(res)

# दी गई स्ट्रिंग से प्रत्येक विराम चिह्न को # से बदलें
from string import punctuation

str1 = '/*Jon is @developer & musician!!'
replace_char = '#'
for char in punctuation:
    str1 = str1.replace(char, replace_char)

print("The strings after replacement : ", str1)

# एक सूची को देखते हुए इसे पुनरावृत्त करें और प्रत्येक तत्व की घटना की गणना करें और प्रत्येक तत्व की गिनती दिखाने के लिए एक शब्दकोश बनाएं
sampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]
countDict = dict()
for item in sampleList:
  if(item in countDict):
    countDict[item] += 1
  else:
    countDict[item] = 1
  
print("Printing count of each item  ",countDict)

# समान आकार की दो सूची को देखते हुए एक सेट बनाएं जैसे कि यह जोड़ी में दोनों सूचियों के तत्व को दिखाता है
firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)

# दो सेटों को देखते हुए प्रतिच्छेदन खोजें और उन तत्वों को पहले सेट से हटा दें
firstSet  = {23, 42, 65, 57, 78, 83, 29}
secondSet = {57, 83, 29, 67, 73, 43, 48}

intersection = firstSet.intersection(secondSet)
for item in intersection:
  firstSet.remove(item)
print("First Set after removing common element ", firstSet)

# एक शब्दकोश दिया गया है, शब्दकोश से सभी मान प्राप्त करें और इसे एक सूची में जोड़ें, लेकिन डुप्लिकेट न जोड़ें
speed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,
          'july':54, 'Aug':44, 'Sept':54} 

speedList = []
for item in speed.values():
  if item not in speedList:
    speedList.append(item)
print("unique list", speedList)

# दशमलव संख्या को अष्टक में बदलें
print('%o,' % (8))

# स्ट्रिंग को डेटाटाइम ऑब्जेक्ट में कनवर्ट करें
from datetime import datetime
date_string = "Feb 25 2020  4:20PM"
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)

# दी गई तारीख से एक सप्ताह घटाएं
from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)

# किसी दी गई तारीख के सप्ताह का दिन ज्ञात करें?
from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))

# दी गई तारीख में सप्ताह (7 दिन) और 12 घंटे जोड़ें
from datetime import datetime, timedelta
given_date = datetime(2020, 3, 22, 10, 00, 00)
days_to_add = 7
res_date = given_date + timedelta(days=days_to_add, hours=12)
print(res_date)

# दो दी गई तिथियों के बीच दिनों की संख्या की गणना करें
from datetime import datetime

date_1 = datetime(2020, 2, 25).date()
date_2 = datetime(2020, 9, 17).date()
delta = None
if date_1 > date_2:
    delta = date_1 - date_2
else:
    delta = date_2 - date_1
print("Difference is", delta.days, "days")

# 0 से 10 तक की संख्याओं का योग निकालने के लिए एक पुनरावर्ती फलन लिखिए
def calculateSum(num):
    if num:
        return num + calculateSum(num-1)
    else:
        return 0
res = calculateSum(10)
print(res)

# दो दी गई संख्याओं के बीच सभी सम संख्याओं की Python सूची तैयार करें
num1 = 4
num2 = 30
myval = [i for i in range(num1, num2, 2)]
print(myval)

# दी गई सूची में से सबसे बड़ा आइटम लौटाएं
aList = [4, 6, 8, 24, 12, 2]
print(max(aList))

# एक पूर्णांक से प्रत्येक अंक को उल्टे क्रम में निकालने के लिए एक प्रोग्राम लिखें
number = 7536
while (number > 0):
    digit = number % 10
    number = number // 10
    print(digit, end=" ")

# पायथन सूची को देखते हुए, सूची से दी गई संख्या की सभी घटनाओं को हटा दें
num1 = 20
list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
   return [value for value in sampleList if value != val]
resList = removeValue(list1, num1)
print(resList)

# किसी सूची को बेतरतीब ढंग से शफ़ल करें
import random
list = [2,5,8,9,12]
random.shuffle(list)
print ("Printing shuffled list ", list)

# फ्लोट नंबरों का एक यादृच्छिक n-आयामी सरणी उत्पन्न करें
import numpy
random_float_array = numpy.random.rand(2, 2)
print("2 X 2 random float array in [0.0, 1.0] \n", random_float_array,"\n")

# यादृच्छिक सार्वभौमिक अद्वितीय आईडी उत्पन्न करें
import uuid
safeId = uuid.uuid4()
print("safe unique id is ", safeId)

# अलग-अलग संभावना वाले सूची से दिए गए तत्वों की संख्या चुनें
import random
num1 =5
numberList = [111, 222, 333, 444, 555]
print(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))

# भारित यादृच्छिक संख्या उत्पन्न करें
import random
randomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)
print(randomList)

# एक विश्वसनीय सुरक्षित यादृच्छिक संख्या उत्पन्न करना
import secrets
print("Random integer number generated using secrets module is ")
number = secrets.randbelow(30)
print(number)

# पायथन में एक सूची द्वारा गणना की जाने वाली मेमोरी का उपयोग किया जा रहा है
import sys
list1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']
print("size of list = ",sys.getsizeof(list1))

# खोजें कि सूची में सभी तत्व समान हैं या नहीं
listOne = [20, 20, 20, 20]
print("All element are duplicate in listOne:", listOne.count(listOne[0]) == len(listOne))

# एक अभिव्यक्ति में दो शब्दकोशों को मर्ज करें
currentEmployee = {1: 'Scott', 2: "Eric", 3:"Kelly"}
formerEmployee  = {2: 'Eric', 4: "Emma"}
allEmployee = {**currentEmployee, **formerEmployee}
print(allEmployee)

# दो सूचियों को शब्दकोश में बदलें
ItemId = [54, 65, 76]
names = ["Hard Disk", "Laptop", "RAM"]
itemDictionary = dict(zip(ItemId, names))
print(itemDictionary)

# स्ट्रिंग में वैकल्पिक मामले
test_str = "geeksforgeeks"
res = "" 
for idx in range(len(test_str)): 
    if not idx % 2 : 
       res = res + test_str[idx].upper() 
    else: 
       res = res + test_str[idx].lower() 
print(res)

# ईमेल को मान्य करने के लिए एक पायथन प्रोग्राम लिखें
import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check(email):
  if(re.search(regex,email)):
    print("Valid Email")
  else:
    print("Invalid Email")

email = "ishwarraja@gmail.com"
check(email)

# पासवर्ड के सत्यापन को लागू करने के लिए एक प्रोग्राम लिखें
class Password:
    def __init__(self, password):
        self.password = password

    def validate(self):        
        vals = {
        'Password must contain an uppercase letter.': lambda s: any(x.isupper() for x in s),
        'Password must contain a lowercase letter.': lambda s: any(x.islower() for x in s),
        'Password must contain a digit.': lambda s: any(x.isdigit() for x in s),
        'Password must be at least 8 characters.': lambda s: len(s) >= 8,
        'Password cannot contain white spaces.': lambda s: not any(x.isspace() for x in s)            
        } 
        valid = True  
        for n, val in vals.items():                         
           if not val(self.password):                   
               valid = False
               return n
        return valid                


input_password = "Ishwar@12Su@ 1'"
p = Password(input_password)
if p.validate() is True:
  print('Password Valid')
else:
  print(p.validate())

# nth फिबोनैकी संख्या वापस करने के लिए पायथन फ़ंक्शन
def fib(n):
   if n <= 1:
      return n
   else:
      return (fib(n-1) + fib(n-2))

# पायथन फ़ंक्शन किसी संख्या के भाज्य को वापस करने के लिए
def fact(n):
   if n == 1:
      return n
   else:
      return n * fact(n-1)

# पायथन फ़ंक्शन संख्याओं की सूची के वर्गों को वापस करने के लिए
def sq(n):
   return [i**2 for i in range(n)]

# पायथन फ़ंक्शन संख्याओं की सूची का वर्गमूल वापस करने के लिए
def sqrt(n):
   return [i**0.5 for i in range(n)]

# पायथन फ़ंक्शन पहली सूची से सम संख्या और दूसरी सूची से विषम संख्या जोड़ने के लिए
def even_odd(l1, l2):
    return[x + y for x, y in zip(l1, l2) if x % 2 ==0 and y % 2 != 0]

# पायथन एक स्ट्रिंग से स्वरों को निकालने का कार्य करता है
def strip_vowel_str(str):
    vowels = ['a', 'e', 'i', 'o', 'u']
    return "".join([x for x in str if x not in vowels])

# पायथन ReLu फ़ंक्शन
def relu_like_activation(l):
    return[0 if x < 0 else x for x in l]

# पायथन sigmoid फ़ंक्शन
def sigmoid_activation(l):
    return[round(1/(1+math.exp(-x)),2) for x in l]

# पायथन फ़ंक्शन अपवित्र शब्दों की पहचान करने के लिए
def profane_filter(str):
    profane_word_url = "https://raw.githubusercontent.com/RobertJGabriel/Google-profanity-words/master/list.txt"
    file = urllib.request.urlopen(profane_word_url)
    for line in file:
        decoded_line = line.decode("utf-8")
    return decoded_line
    str = re.findall(r'\w+', str)
    return [i for i in str if i in decoded_line]

# पायथन फ़ंक्शन किसी सूची में सम संख्याएँ जोड़ने के लिए
def add_even_num(l):
    sum = reduce(lambda a, b: a + b, filter(lambda a: (a % 2 == 0), l))
    return sum

# पायथन फ़ंक्शन एक वृत्त का क्षेत्र को खोजने के लिए
def circle_area(r):
    return 22/7 * r**2

# पायथन प्रोग्राम यह पता लगाने के लिए कि कोई संख्या अभाज्य है या नहीं
def test_prime(n):
    if (n==1):
        return False
    elif (n==2):
        return True;
    else:
        for x in range(2,n):
            if(n % x==0):
                return False
        return True             

# पायथन फ़ंक्शन संख्याओं की सूची के क्यूब्स को वापस करने के लिए
def cube(n):
   return [i*i*i for i in range(n)]

# पायथन फ़ंक्शन दी गई संख्याओं का औसत खोजने के लिए
def average():
    numbers = []
    def add(number):
        numbers.append(number)
        total = sum(numbers)
        count = len(numbers)
        return total/count
    return add
a = average()
a(10)
a(20)
a(45)

# पायथन फ़ंक्शन योजक बनाने के लिए
def create_adders():
    adders = []
    for n in range(1, 4):
        adders.append(lambda x, y=n: x + y)
    return adders
adders = create_adders()

# डेटाटाइम के लिए पायथन फ़ंक्शन
from datetime import datetime
datetime.utcnow()
def log(msg, *, dt = datetime.utcnow()):
    print(f'Message at {dt} was {msg}')

# पता संदर्भ की गिनती के लिए पायथन फ़ंक्शन
import ctypes
def ref_count(address : int): #what is int doing here? Annotations
    return ctypes.c_long.from_address(address).value

# टपल को संशोधित करने के लिए पायथन फ़ंक्शन
def modify_tuple(t):
    print(f'Initial t mem-add = {id(t)}')
    t[0].append(100)
    print(f'Final t mem-add = {id(t)}')

# पायथन फ़ंक्शन दो स्ट्रिंग की तुलना करने के लिए
def compare_using_equals(n):
    a = 'a long string that is not intered' * 200
    b = 'a long string that is not intered' * 200
    for i in range(n):
        if a == b:
            pass

# इंटर्निंग का उपयोग करके स्ट्रिंग की तुलना करने के लिए पायथन प्रोग्राम
import sys
def compare_using_interning(n):
    a = sys.intern('a long string that is not intered' * 200)
    b = sys.intern('a long string that is not intered' * 200)
    for i in range(n):
        if a is b:
            pass

# पायथन फ़ंक्शन फ्लोट और दशमलव बनाने के लिए लगने वाले समय की गणना करने के लिए
import time
def run_float(n = 1):
    for i in range(n):
        a = 3.1415

def run_decimal(n = 1):
    for i in range(n):
        a = Decimal('3.1415')
n = 10000000
start = time.perf_counter()
run_float(n)
end = time.perf_counter()

print ('float: ', end - start)

start = time.perf_counter()
run_decimal(n)
end = time.perf_counter()

print ('decimal: ', end - start)

# reduce का उपयोग करके फैक्टोरियल के लिए पायथन फ़ंक्शन
def fact(n):
    from operator import mul
    from functools import reduce
    return reduce(mul, range(1, n+1))
fact(10)

# पायथन फ़ंक्शन यह पता लगाने के लिए कि क्या दिए गए निर्देशांक सर्कल के अंदर हैं
from random import uniform
from math import sqrt
def random_shot(rad):
    r_x = uniform(-rad, rad)
    r_y = uniform(-rad, rad)

    if sqrt(r_x**2 + r_y**2) <= rad:
        is_in_circle = True
    else:
        is_in_circle = False
    
    return r_x, r_y, is_in_circle

# पायथन फ़ंक्शन एक वर्ग के क्षेत्र को खोजने के लिए
def square_area(x):
    return x ** 2

# पहले n नंबरों के योग के लिए पायथन प्रोग्राम।
def sum_n_num(n):
    return n * (n + 1)/2

# पायथन प्रोग्राम दो सूचियाँ जोड़ने के लिए
 
NumList1 = []
NumList2 = []
total = []

Number = int(input("Please enter the Total Number of List Elements: "))
print("Please enter the Items of a First and Second List   ")
for i in range(1, Number + 1):
    List1value = int(input("Please enter the %d Element of List1 : " %i))
    NumList1.append(List1value)

    List2value = int(input("Please enter the %d Element of List2 : " %i))
    NumList2.append(List2value)
    
for j in range(Number):
    total.append( NumList1[j] + NumList2[j])
 
print("\nThe total Sum of Two Lists =  ", total)

# सूची में सबसे बड़ी और सबसे छोटी संख्या खोजने के लिए पायथन प्रोग्राम

NumList = []
Number = int(input("Please enter the Total Number of List Elements: "))
for i in range(1, Number + 1):
    value = int(input("Please enter the Value of %d Element : " %i))
    NumList.append(value)

smallest = largest = NumList[0]

for j in range(1, Number):
    if(smallest > NumList[j]):
        smallest = NumList[j]
        min_position = j
    if(largest < NumList[j]):
        largest = NumList[j]
        max_position = j

print("The Smallest Element in this List is : ", smallest)
print("The Index position of Smallest Element in this List is : ", min_position)
print("The Largest Element in this List is : ", largest)
print("The Index position of Largest Element in this List is : ", max_position)

# पायथन पैलिंड्रोम प्रोग्राम फंक्शंस का उपयोग करके
 
reverse = 0
def integer_reverse(number):
    global reverse
    
    if(number > 0):
        Reminder = number % 10
        reverse = (reverse * 10) + Reminder
        integer_reverse(number // 10)
    return reverse


number = int(input("Please Enter any Number: "))

rev = integer_reverse(number)
print("Reverse of a Given number is = %d" %rev)

if(number == rev):
    print("%d is a Palindrome Number" %number)
else:
    print("%d is not a Palindrome Number" %number)

# पायथन प्रोग्राम दो नंबर स्वैप करने के लिए
 
a = float(input(" Please Enter the First Value a: "))
b = float(input(" Please Enter the Second Value b: "))

print("Before Swapping two Number: a = {0} and b = {1}".format(a, b))

temp = a
a = b
b = temp

print("After Swapping two Number: a = {0} and b = {1}".format(a, b))

# स्ट्रिंग्स को जोड़ने के लिए पायथन प्रोग्राम

str1 = input("Please Enter the First  String : ")
str2 = input("Please Enter the Second String : ")

concat1 = str1 + str2
print("The Final String After Python String Concatenation = ", concat1)

concat2 = str1 + ' ' + str2
print("The Final After String Concatenation with Space = ", concat2)

# तीन नंबरों में से सबसे बड़ी संख्या खोजने के लिए पायथन प्रोग्राम

a = float(input("Please Enter the First value: "))
b = float(input("Please Enter the First value: "))
c = float(input("Please Enter the First value: "))

if (a > b and a > c):
          print("{0} is Greater Than both {1} and {2}". format(a, b, c))
elif (b > a and b > c):
          print("{0} is Greater Than both {1} and {2}". format(b, a, c))
elif (c > a and c > b):
          print("{0} is Greater Than both {1} and {2}". format(c, a, b))
else:
          print("Either any two values or all the three values are equal")

# एक वृत्त का व्यास, परिधि और क्षेत्रफल खोजने के लिए पायथन प्रोग्राम
import math

def find_Diameter(radius):
    return 2 * radius

def find_Circumference(radius):
    return 2 * math.pi * radius

def find_Area(radius):
    return math.pi * radius * radius

r = float(input(' Please Enter the radius of a circle: '))

diameter = find_Diameter(r)
circumference = find_Circumference(r)
area = find_Area(r)

print("\n Diameter Of a Circle = %.2f" %diameter)
print(" Circumference Of a Circle = %.2f" %circumference)
print(" Area Of a Circle = %.2f" %area)

# पायथन प्रोग्राम स्ट्रिंग को अपरकेस में कनवर्ट करने के लिए
 
string = input("Please Enter your Own String : ")

string1 = string.upper()
 
print("\nOriginal String in Lowercase  =  ", string)
print("The Given String in Uppercase =  ", string1)

# साधारण ब्याज की गणना करने के लिए पायथन प्रोग्राम

princ_amount = float(input(" Please Enter the Principal Amount : "))
rate_of_int = float(input(" Please Enter the Rate Of Interest   : "))
time_period = float(input(" Please Enter Time period in Years   : "))

simple_interest = (princ_amount * rate_of_int * time_period) / 100

print("\nSimple Interest for Principal Amount {0} = {1}".format(princ_amount, simple_interest))

# पायथन प्रोग्राम दो सूचियों को एक शब्दकोश में मैप करने के लिए

keys = ['name', 'age', 'job']
values = ['John', 25, 'Developer']

myDict = {k: v for k, v in zip(keys, values)}
print("Dictionary Items  :  ",  myDict)

# सिलेंडर की मात्रा की गणना करने के लिए एक पायथन फ़ंक्शन लिखें
def volume(r, h): 
    vol = 22/7 * r * r * h 
    return vol

# हनोई के टावर को हल करने के लिए रिकर्सिव पायथन फ़ंक्शन
def TowerOfHanoi(n , source, destination, auxiliary): 
    if n==1: 
        print "Move disk 1 from source",source,"to destination",destination 
        return
    TowerOfHanoi(n-1, source, auxiliary, destination) 
    print "Move disk",n,"from source",source,"to destination",destination 
    TowerOfHanoi(n-1, auxiliary, destination, source) 

n = 4
TowerOfHanoi(n,'A','B','C') 
  
# घंटे की सुई और मिनट की सुई के बीच का कोण खोजने के लिए पायथन फ़ंक्शन
def calcAngle(hh, mm): 
  
    # Calculate the angles moved by 
    # hour and minute hands with  
    # reference to 12:00 
    hour_angle = 0.5 * (hh * 60 + mm) 
    minute_angle = 6 * mm 
  
    # Find the difference between 
    # two angles 
    angle = abs(hour_angle - minute_angle) 
  
    # Return the smaller angle of two 
    # possible angles 
    angle = min(360 - angle, angle) 
  
    return angle 
  
# पायथन फ़ंक्शन हर समय प्रिंट करने के लिए जब घंटे हाथ और मिनट हाथ के बीच का कोण थीटा है
def printTime(theta): 
  
    for hh in range(0, 12): 
        for mm in range(0, 60): 
            if (calcAngle(hh, mm)==theta): 
                print(hh, ":", mm, sep = "") 
                return
              
    print("Input angle not valid.") 
    return

# एक लिंक की गई सूची को उलटने के लिए एक पायथन प्रोग्राम लिखें

class Node: 

    def __init__(self, data): 
        self.data = data 
        self.next = None

class LinkedList: 

    def __init__(self): 
        self.head = None

    def reverse(self): 
        prev = None
        current = self.head 
        while(current is not None): 
            next = current.next
            current.next = prev 
            prev = current 
            current = next
        self.head = prev 
        
    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 

    def printList(self): 
        temp = self.head 
        while(temp): 
            print(temp.data)
            temp = temp.next


llist = LinkedList() 
llist.push(20) 
llist.push(4) 
llist.push(15) 
llist.push(85) 

print("Given Linked List")
llist.printList() 
llist.reverse() 
print("\nReversed Linked List")
llist.printList() 

# किसी दिए गए स्ट्रिंग से सभी डुप्लीकेट को हटाने के लिए एक पायथन फ़ंक्शन लिखें
def removeDuplicate(str): 
    s=set(str) 
    s="".join(s) 
    print("Without Order:",s) 
    t="" 
    for i in str: 
        if(i in t): 
            pass
        else: 
            t=t+i 
    print("With Order:",t) 
    
str1="conondrum"
removeDuplicate(str1) 

from .sin import sine
from .cos import cosine
from .tan import tangent
from .softmax import softmax
from .sigmoid import sigmoid
from .tanh import tanh
from .relu import ReLU
from .log import log
from .exp import exp

from .sin import dsine
from .cos import dcosine
from .tan import dtangent
from .sigmoid import dsigmoid
from .tanh import dtanh
from .log import dlog
from .exp import dexp

import math

# कोसाइन कोण खोजने के लिए पायथन फ़ंक्शन
def cosine(angle):

    """ returns the cosine value for an angle mentioned in radians"""

    return math.cos(angle)

# कोसाइन कोण के व्युत्पन्न को खोजने के लिए पायथन फ़ंक्शन
def dcosine(angle):

    """ returns the cosine value for an angle mentioned in radians"""

    return -math.sin(angle)

# साइन कोण खोजने के लिए पायथन फ़ंक्शन
def sine(angle):

    """ returns the sine value for an angle mentioned in radians"""

    return math.sin(angle)

# साइन कोण के व्युत्पन्न को खोजने के लिए पायथन फ़ंक्शन
def dsine(angle):

    """ returns the sine value for an angle mentioned in radians"""

    return math.cos(angle)

# स्पर्शरेखा कोण खोजने के लिए पायथन फ़ंक्शन 
def tangent(angle):

  """ returns the tangent value for an angle mentioned in radians"""

  return math.tan(angle)

# स्पर्शरेखा कोण के व्युत्पन्न खोजने के लिए पायथन फ़ंक्शन
def dtangent(angle):

  """ returns the tangent value for an angle mentioned in radians"""

  return 1/(math.cos(angle)**2)

# किसी संख्या के प्रतिपादक को खोजने के लिए पायथन फ़ंक्शन
def exp(x):

  """returns e^x of a number"""

  return math.exp(x)

# एक संख्या के प्रतिपादक के व्युत्पन्न को खोजने के लिए पायथन फ़ंक्शन
def dexp(x):

    return math.exp(x)

# किसी संख्या के लॉगरिदमिक मान को खोजने के लिए पायथन फ़ंक्शन
def log(x):

  """returns the logarithmic value of a number"""

  return math.log(x)

# किसी संख्या के लघुगणकीय मान का व्युत्पन्न ज्ञात करने के लिए पायथन फ़ंक्शन
def dlog(x):

    return 1/x

# वेक्टर के सॉफ्टमैक्स आउटपुट को खोजने के लिए पायथन फ़ंक्शन

def softmax(x):

  """returns the softmax output of a vector"""

  if(type(x) == int or type(x) == float):

    return 1

  denom = 0

  for i in x:

    denom+=math.exp(i)

  new_vec = []

  for i in x:

    new_vec.append(math.exp(i)/denom)

  return new_vec
  
# एक संख्या के अतिशयोक्तिपूर्ण स्पर्शरेखा मूल्य को खोजने के लिए पायथन फ़ंक्शन
def tanh(x):

  """ returns the hyperbolic tangent value of a number"""

  return math.tanh(x)

# एक संख्या के अतिशयोक्तिपूर्ण स्पर्शरेखा मान के व्युत्पन्न को खोजने के लिए पायथन फ़ंक्शन
def dtanh(x):

  """ returns the hyperbolic tangent value of a number"""

  return 1 - (math.tanh(x)**2)